2006-12-11  gettextize  <bug-gnu-gettext@gnu.org>

	* configure.ac (AM_GNU_GETTEXT_VERSION): Bump to 0.14.5.

2006-10-29  gettextize  <bug-gnu-gettext@gnu.org>
	* Makefile.am (SUBDIRS): Add po.
	(ACLOCAL_AMFLAGS): New variable.
	(EXTRA_DIST): Add config.rpath, mkinstalldirs, m4/ChangeLog.
	* configure.ac (AC_CONFIG_FILES): Add po/Makefile.in.

2005-08-11
	All further changes will be tracked using the Subversion server at
	http://svn1.cvsdude.com/wsvn/saladyears/

2005-03-18  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/PlayIconLayout.cpp
    src/Cities3D/SettlersFrame.cpp
    src/Cities3D/cities3d.vcproj
    src/GLCore/SettlersGLCanvas.cpp
    src/UICore/CustomFrame.cpp
    src/UICore/CustomFrame.h
    src/UICore/OwnerDrawWindow.h
    src/UICore/UICore.vcproj
    +Cities3D/GameContextMenu.cpp
    +Cities3D/GameContextMenu.h
    +UICore/BaseContextMenu.cpp
    +UICore/BaseContextMenu.h
    +UICore/OwnerDrawFrame.cpp
    +UICore/OwnerDrawFrame.h
    First pass at custom context menus.  Have owner-draw basics down, with
    empty menus coming up on right-click inside canvas.
  * src/*
    Updated every file to have copyright 2005 text.
  * src/Cities3D/PlayIconLayout.cpp
    src/Cities3D/PlayIconLayout.h
    src/Cities3D/SettlersFrame.cpp
    src/Cities3D/cities3d.vcproj
    +src/Cities3D/IconWindow.cpp
    +src/Cities3D/IconWindow.h
    Added a single subwindow that will maintain all the icon layouts in the
    main window.

2005-03-17  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/SettlersFrame.cpp
    src/Cities3D/SettlersFrame.h
    src/Cities3D/cities3d.vcproj
    src/CoreRules/ImageSetsCore.cpp
    src/UICore/UICore.vcproj
    +distribute/tex/uiicons.tex
    +src/Cities3D/PlayIconLayout.cpp
    +src/Cities3D/PlayIconLayout.h
    +src/UICore/IconLayout.cpp
    +src/UICore/IconLayout.h
    Added icons and an initial pass at an icon layout window to allow
    no menu workability in the application.  Works, looks good, even, but not
    the final product yet.  Three icons on the main window now for hotseat, 
    network, and loading a game.

2005-01-14  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/defineRules.h
    src/CoreRules/defineRules.h
    src/ModelCore/Game.h
    src/ModelCore/PlayerGame.h
    src/ModelCore/TileObject.h
    src/NetworkRules/NetworkRules.vcproj
    src/NetworkRules/NetworkServer.cpp
    src/NetworkRules/NetworkServer.h
    src/NetworkRules/defineRules.h
    src/RulesCore/Access.h
    src/RulesCore/INetworkServer.h
    src/RulesCore/IPluginEngine.h
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/PluginEngine.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/stdwx.cpp
    src/SeafarersRules/defineRules.h
    src/StandardRules/defineRules.h
    src/cities3d.sln
    src/common/RuleSetDatabase.cpp
    -src/Cities3D Installer.sln
    -src/Cities3D Installer.vdproj
    -src/CoreAI/CoreAI.cpp
    -src/CoreAI/CoreAI.vcproj
    -src/CoreAI/defineAI.h
    -src/CoreAI/stdwx.cpp
    -src/CoreAI/stdwx.h
    -src/RulesCore/AI.cpp
    -src/RulesCore/AI.h
    -src/RulesCore/AIAccess.cpp
    -src/RulesCore/AIAccess.h
    -src/RulesCore/AILogic.h
    -src/RulesCore/AIRule.h
    -src/RulesCore/BaseAccess.h
    -src/RulesCore/RuleBase.cpp
    -src/RulesCore/RuleBase.h
    -src/StandardAI/StandardAI.cpp
    -src/StandardAI/StandardAI.vcproj
    -src/StandardAI/stdwx.cpp
    -src/StandardAI/stdwx.h
    Removed all the AI stuff which was a bloat and wasn't going to be used.

2004-12-10  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkConnectPage.cpp
    src/NetworkRules/NetworkServer.cpp:
    At long last, discovered what the stupid problem was with not getting
    data from the clients.  I was using SetNotify() instead of Notify() to tell
    the server socket I wanted to get socket events.  MOTHER FRICKER!!!
  * src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectPage.h
    src/Cities3D/NetworkNotebook.cpp
    src/Cities3D/NetworkNotebook.h
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/NetworkRules/NetworkServer.cpp
    src/NetworkRules/NetworkServer.h
    src/RulesCore/INetworkEngine.h
    src/RulesCore/INetworkServer.h:
    Fixed up some design problems with the NetworkEngine, which now handles
    disconnects much more gracefully.

2004-12-01  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BankUI.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectPage.h
    src/Cities3D/NetworkGamePage.cpp
    src/Cities3D/NetworkNotebook.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SettlersFrame.cpp
    src/Cities3D/TurnUI.cpp
    src/Cities3D/cities3d.vcproj
    src/CoreRules/ImageSetsCore.cpp
    src/GLCore/SettlersGLCanvas.cpp
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkClient.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/NetworkRules/NetworkRules.vcproj
    src/NetworkRules/NetworkServer.cpp
    src/NetworkRules/NetworkServer.h
    src/RulesCore/AnySerializer.h
    src/RulesCore/DataObject.cpp
    src/RulesCore/DataObject.h
    src/RulesCore/GameEngine.cpp
    src/RulesCore/IAnySerializer.h
    src/RulesCore/INetworkEngine.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/PluginEngine.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseNotebook.cpp
    src/UICore/CustomFrame.cpp
    src/UICore/CustomFrame.h
    +src/Cities3D/SpectatorListCtrl.cpp
    +src/Cities3D/SpectatorListCtrl.h
    +src/NetworkRules/NetworkAddSpectator.cpp:
    Bunch of work getting spectators to show up in the spectator list after
    connecting to a game.  Still buggy right now.
2004-11-24  Jason Fugate <jfugate@users.sourceforge.net>
  * distribute/tex/uibuttons.tex
    src/Cities3D/SettlersFrame.cpp
    src/Cities3D/SettlersView.cpp
    src/CoreRules/ImageSetsCore.cpp
    src/DatabaseCore/Image.cpp
    src/DatabaseCore/Image.h
    src/Tex3D/TexDialog.cpp
    src/UICore/BaseBitmapButton.cpp
    src/UICore/BaseBitmapButton.h
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/BaseFrame.cpp
    src/UICore/BaseFrame.h
    src/UICore/CustomFrame.cpp
    src/UICore/CustomFrame.h
    src/UICore/OwnerDrawWindow.h
    src/UICore/UICore.vcproj:
    Layouts are looking good again, and fixed up a lot of minor issues with
    frames and dialogs.  Added a really cheap close bitmap to the upper-right
    window for now, but that will need to improve in the future.
    
2004-11-18  Jason Fugate <jfugate@users.sourceforge.net>
  * src/UICore/BaseBitmapButton.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/BaseFrame.h
    src/UICore/CustomFrame.cpp
    src/UICore/CustomFrame.h:
    Dialogs are working again (hallelujah).  After that irregularly
    scheduled break, I can actually get back to work on the network UI
    or else making the front page of the app less lame than it is right
    now.
  * src/UICore/CustomFrame.cpp
    src/UICore/CustomFrame.h:
    Added maximize/restore for double-clicking on the CustomFrame header.
  * src/Cities3D/app.cpp
    src/UICore/BaseBitmapButton.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/BaseFrame.cpp
    src/UICore/BaseFrame.h
    src/UICore/CustomFrame.h
    src/UICore/UICore.vcproj
    +src/UICore/CustomFrame.cpp
    -src/UICore/CustomFrame.inl:
    Major cleanup of custom frame implementation.  Dialogs are broken for right
    now but that's next.  Took me a long time to get things right, but now sizing
    and moving are handled normally instead of with the rubber-banded sizing rects
    drawn on the screen.

2004-11-11  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectToDialog.cpp
    src/Cities3D/NetworkDialog.cpp
    src/Cities3D/NetworkGamePage.cpp
    src/Cities3D/NetworkNotebook.h
    src/Cities3D/NetworkSettingsDialog.cpp
    src/Cities3D/OpenGameDialog.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/SplashDialog.cpp
    src/Cities3D/app.cpp
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/BaseFrame.cpp
    src/UICore/ISizer.h
    src/UICore/UICore.vcproj
    +src/Cities3D/BaseButton.cpp
    +src/Cities3D/BaseButton.h
    +src/Cities3D/BaseSizer.h
    +src/UICore/BaseBitmapButton.cpp
    +src/UICore/BaseBitmapButton.h
    -src/UICore/ClearButton.cpp
    -src/UICore/ClearButton.h:
    No more wxClearButton.  Now it is wxBaseBitmapButton, which can take any
    arbitrary bitmaps instead of being tied to the ImageEngine.  Had to retool
    wxBaseDialog as a result so it no longer created OK and Cancel buttons 
    automatically.  Now ISizer has a virtual function called CreateButtons that
    allows derived dialogs to create their own control buttons.

2004-11-10  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkDialog.cpp
    src/Cities3D/SettlersFrame.cpp
    src/UICore/BaseDialog.cpp:
    A few more tweaks.
  * src/Cities3D/SettlersFrame.cpp
    src/Cities3D/SettlersFrame.h
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseDialog.cpp
    src/UICore/BaseFrame.cpp
    src/UICore/BaseListCtrl.cpp
    src/UICore/BaseListCtrl.h
    src/UICore/CustomFrame.inl:
    Got some basics back up and running.
  * distribute/tex/uisplash.tex
    src/Cities3D/SettlersFrame.cpp
    src/Cities3D/SplashDialog.cpp
    src/Cities3D/SplashDialog.h
    src/Cities3D/app.cpp
    src/UICore/BaseFrame.cpp:
    The splash screen is now a real splash screen.  Three seconds of pure
    viewing satisfaction!

2004-11-09  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/UICore.vcproj
    +src/Cities3D/SettlersFrame.cpp
    +src/Cities3D/SettlersFrame.h
    +src/UICore/BaseFrame.cpp
    +src/UICore/BaseFrame.h
    +src/UICore/CustomFrame.h
    +src/UICore/CustomFrame.inl
    It's a Brave New World.  Menus?  What's a menu?

2004-11-08  Jason Fugate <jfugate@users.sourceforge.net>
  * distribute/tex/uibuttons.tex
    src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/OpenGameDialog.cpp
    src/Cities3D/OpenGameDialog.h
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/SettingsDialog.cpp
    src/CoreRules/ImageSetsCore.cpp
    src/Tex3D/app.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/ClearButton.cpp
    src/common/define/defineColor.h:
    Created new tab and button bitmaps that look way better (to me, anyway).
    Fixed some issues with the General Settings dialog so that it now resizes
    automatically to fit each option window, which will be applicable to the
    notebook pages as well.  Changed wxClearButton so it doesn't use Colorize anymore,
    but instead looks for a disabled bitmap in the image sets.

2004-11-05  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/NetworkGamePage.cpp
    src/Cities3D/NetworkGamePage.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/CoreRules/CoreRules.vcproj
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkClient.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkServer.cpp
    src/NetworkRules/NetworkServer.h
    src/RulesCore/AnySerializer.h
    src/RulesCore/DataObject.cpp
    src/RulesCore/DataObject.h
    src/RulesCore/INetworkClient.h
    src/RulesCore/INetworkEngine.h
    src/RulesCore/INetworkServer.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleEngine.h
    +src/CoreRules/RuleUseCK.cpp:
    Hmm, lots of good stuff in this checkin.  Finally got to the point
    where I could attempt to serialize/unserialize a Rule over the network.
    Naturally, there were issues, but they are now all resolved and Rules can
    be serialized, with lots of error protection and programmer feedback built-in.
    Now, when a client connects, the host can change maps, and that Rule is
    serialized across the network to the clients, who receive the Rule and execute
    it, meaning that their map display boxes are properly updated.  Sweet.  Next
    up: the spectator list.

2004-11-04  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkGamePage.cpp
    src/Cities3D/NetworkNotebook.cpp
    src/NetworkRules/NetworkClient.cpp
    src/UICore/BaseNotebook.cpp:
    Completed initial layout for the network Game page.  Now there
    are placeholder windows for all of the components in the page.  Also
    fixed some minor UI bugs with the page displays.

2004-11-03  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkConnectPage.h
    src/Cities3D/NetworkNotebook.cpp
    src/Cities3D/NetworkNotebook.h
    src/Cities3D/cities3d.vcproj
    src/NetworkRules/NetworkServer.cpp
    src/UICore/BaseNotebook.cpp
    src/UICore/BaseNotebook.h
    +src/Cities3D/NetworkGamePage.cpp
    +src/Cities3D/NetworkGamePage.h:
    First pass at a game page.  It shows up in the tab when a server is started and
    goes away when the server is stopped.  That's it for now.

2004-11-02  Jason Fugate <jfugate@users.sourceforge.net>
  * src/UICore/BaseListCtrl.cpp
    src/UICore/BaseListCtrl.h:
    Aaaahhhh, got rid of those crappy gray headers in the list controls.

2004-11-01  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectPage.h
    src/Cities3D/cities3d.vcproj
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkClient.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/NetworkRules/NetworkServer.cpp
    src/NetworkRules/NetworkServer.h
    src/RulesCore/INetworkClient.h
    src/RulesCore/INetworkEngine.h
    src/UICore/BaseDialog.cpp
    +src/Cities3D/NetworkConnectToDialog.cpp
    +src/Cities3D/NetworkConnectToDialog.h
    +src/Cities3D/NetworkSettingsDialog.cpp
    +src/Cities3D/NetworkSettingsDialog.h:
    Network Connect page is done, with the mini-dialogs for letting the user
    enter an IP address or host name to connect to, and for allowing the host to
    specify a specific port to listen on.  Connection works, too.  On to the Game
    page.
  * src/Cities3D/GameListCtrl.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectPage.h
    src/Cities3D/NetworkDialog.cpp
    src/Cities3D/NetworkDialog.h
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/ModelCore/GameDatabase.cpp
    src/ModelCore/GameDatabase.h
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkClient.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/INetworkEngine.h:
    More work on the Network Connect page.  Removed the silly callback function
    from LoadGame in the GameDatabase, since using an Event via the Controller is
    much more flexible and maintainable.  Can actually start a server listening now
    via the Network Connect page.  Need to add an IP/hostname entry dialog to get
    client connection going.  After that comes the meat of the work, the Game page.

2004-10-28  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectPage.h
    More work on the Network Connect page.

2004-10-27  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/NetworkConnectPage.cpp
    src/Cities3D/NetworkConnectPage.h
    src/Cities3D/NetworkDialog.cpp
    src/Cities3D/NetworkDialog.h
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/PlayerListCtrl.cpp
    src/Cities3D/PlayerListCtrl.h
    src/Cities3D/SplashDialog.h
    src/UICore/BaseDialog.cpp
    src/UICore/BaseNotebook.cpp
    src/UICore/BaseNotebook.h
    Finished the layout of the Network Connect page, now it's time to start
    hooking network crap up.
  * src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/RulesCore/GameEngine.cpp
    Added a map info cache to MapDatabase, which results in a massive speedup
    when opening the Select A Map dialog, which is nice.

2004-10-26  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/GameListCtrl.cpp
    src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerListCtrl.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/app.cpp
    src/CoreRules/RuleUIAddPlayer.cpp
    src/CoreRules/RuleUIChangeColor.cpp
    src/CoreRules/RuleUIRemovePlayer.cpp
    src/ModelCore/CornerObject.cpp
    src/ModelCore/Data.cpp
    src/ModelCore/Data.h
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/GameDatabase.cpp
    src/ModelCore/GameDatabase.h
    src/ModelCore/Map.h
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/Player.cpp
    src/ModelCore/Player.h
    src/ModelCore/PlayerDatabase.cpp
    src/ModelCore/PlayerDatabase.h
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/ModelCore/SideObject.cpp
    src/ModelCore/SideObject.h
    src/ModelCore/Utility.cpp
    src/ModelCore/Utility.h
    src/RulesCore/GameEngine.cpp
    src/StandardRules/RuleInitialResources.cpp
    src/StandardRules/RulePlaySettlementSound.cpp
    src/common/define/defineFile.h
    -src/ModelCore/Build.cpp
    -src/ModelCore/Build.h
    -src/ModelCore/Chitless.cpp
    -src/ModelCore/Chitless.h
    -src/ModelCore/Function.h
    -src/ModelCore/Knights.cpp
    -src/ModelCore/Knights.h
    -src/ModelCore/Prepare.cpp
    -src/ModelCore/Prepare.h
    -src/ModelCore/Recurse.cpp
    -src/ModelCore/Recurse.h
    -src/ModelCore/Trade.cpp
    -src/ModelCore/Trade.h:
    Lots of documentation and code cleanup.
  * src/Cities3D/NetworkDialog.cpp
    src/Cities3D/NetworkNotebook.cpp
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseNotebook.cpp
    src/UICore/BaseNotebook.h
    src/UICore/UICore.vcproj
    +src/Cities3D/NetworkConnectPage.cpp
    +src/Cities3D/NetworkConnectPage.h
    +src/UICore/BasePage.cpp
    +src/UICore/BasePage.h
    +src/UICore/BaseRadioButton.cpp
    +src/UICore/BaseRadioButton.h
    -src/Cities3D/NetworkConnect.cpp
    -src/Cities3D/NetworkConnect.h:
    Initial work on Network Connect UI.  Several controls show up on the page,
    nothing else is hooked up yet.
  * src/Cities3D/OptionImages.cpp
    src/Cities3D/OptionSounds.cpp
    src/Cities3D/OptionSounds.h
    src/RulesCore/SoundEngine.cpp:
    Added an option to the sounds window to turn sounds on or off.
  * src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/OptionImages.cpp
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/cities3d.vcproj
    +src/Cities3D/OptionSounds.cpp
    +src/Cities3D/OptionSounds.h:
    Added another option window to set the sounds subdirectory, making it
    completely customizable just like the tex subdirectory.  This took me
    about 15 minutes of coding time to do.  Nice.

2004-10-25  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/OptionImages.cpp
    src/Cities3D/OptionImages.h:
    Added the mipmapping option back into the Images option window.  Sweet.
  * distribute/data/mapkey.db
    distribute/data/maps.db
    distribute/tex/Standard_Small/gltilestandard.tex
    distribute/tex/Vivid_Small/gltilestandard.tex
    src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/OptionDisplaySize.h
    src/Cities3D/OptionWindow.cpp
    src/Cities3D/OptionWindow.h
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/SettingsDialog.h
    src/Cities3D/SplashDialog.cpp
    src/Cities3D/SplashDialog.h
    src/Cities3D/cities3d.vcproj
    src/GLCore/SettlersGLCanvas.cpp
    src/GLCore/SettlersGLCanvas.h
    src/ModelCore/GreaterCatan_IV.cpp
    src/ModelCore/GreaterCatan_V_VI.cpp
    src/ModelCore/OfficialMapDatabase.h
    src/RulesCore/DrawObjectEngine.cpp
    src/RulesCore/DrawObjectEngine.h
    src/RulesCore/IImageEngine.h
    src/RulesCore/ImageEngine.cpp
    src/RulesCore/ImageEngine.h
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/DrawTileObject.h
    src/UICore/BaseTreeCtrl.h
    src/UICore/UICore.vcproj
    +src/Cities3D/OptionImages.cpp
    +src/Cities3D/OptionImages.h
    +src/UICore/BaseComboBox.cpp
    +src/UICore/BaseComboBox.h
    +src/UICore/WaitCursor.h:
    Now that option windows are working well, added an option window that
    lets you select which folder to use for your .tex files, and added the code
    that updates everything on the fly.  Now, you can fully harness the power of
    Tex3D and Cities3D to create your own custom sub-directories of images and
    mix and match what you want together.  Awesome!
    
2004-10-22  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/SettingsDialog.cpp
    src/UICore/BaseStaticBox.cpp
    src/UICore/BaseStaticBox.h
    src/UICore/BaseStaticText.cpp
    src/UICore/BaseStaticText.h:
    At long, long last, figured out how to do the window sizing properly
    in the options display, which finally  makes for nice surfing through the
    options tree, and clears the way to know how to do it with the custom tab
    control, which was holding me up.

2004-10-15  Jason Fugate <jfugate@users.sourceforge.net>
  * distribute/data/mapkey.db
    distribute/data/maps.db
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/OfficialMapDatabase.h
    src/UICore/BaseNotebook.cpp
    +src/ModelCore/GreatCrossingBase.h
    +src/ModelCore/GreatCrossing_IV.cpp
    +src/ModelCore/GreatCrossing_VI.cpp
    +src/ModelCore/GreaterCatanBase.h
    +src/ModelCore/GreaterCatan_IV.cpp
    +src/ModelCore/GreaterCatan_V_VI.cpp
    +src/ModelCore/IntoTheDesertBase.h
    +src/ModelCore/IntoTheDesert_III.cpp
    +src/ModelCore/IntoTheDesert_IV.cpp
    +src/ModelCore/IntoTheDesert_V.cpp
    +src/ModelCore/IntoTheDesert_VI.cpp
    +src/ModelCore/NewWorldBase.h
    +src/ModelCore/NewWorld_III.cpp
    +src/ModelCore/NewWorld_IV.cpp
    +src/ModelCore/NewWorld_V.cpp
    +src/ModelCore/NewWorld_VI.cpp
    +src/ModelCore/OceansBase.h
    +src/ModelCore/Oceans_III.cpp
    +src/ModelCore/Oceans_IV.cpp
    +src/ModelCore/Oceans_V.cpp
    +src/ModelCore/Oceans_VI.cpp
    -src/ModelCore/MapGreatCrossingIV.cpp
    -src/ModelCore/MapGreatCrossingVI.cpp
    -src/ModelCore/MapGreaterCatanIV.cpp
    -src/ModelCore/MapGreaterCatanVI.cpp
    -src/ModelCore/MapIntoDesertIII.cpp
    -src/ModelCore/MapIntoDesertIV.cpp
    -src/ModelCore/MapIntoDesertV.cpp
    -src/ModelCore/MapIntoDesertVI.cpp
    -src/ModelCore/MapNewWorldIII.cpp
    -src/ModelCore/MapNewWorldIV.cpp
    -src/ModelCore/MapNewWorldV.cpp
    -src/ModelCore/MapNewWorldVI.cpp
    -src/ModelCore/MapOceansIII.cpp
    -src/ModelCore/MapOceansIV.cpp
    -src/ModelCore/MapOceansV.cpp
    -src/ModelCore/MapOceansVI.cpp
    Finished up all the map conversions to the new map system.  No
    doc yet, and the centering calculation is a little bit off, but
    they are all done.  Pretty cool.  Now, recompiling changes to the maps
    only affects 20 or so files instead of causing almost a full rebuild.
  * distribute/data/mapkey.db
    distribute/data/maps.db
    src/CoreRules/RuleGeneratePorts.cpp
    src/ModelCore/Data.h
    src/ModelCore/Map.cpp
    src/ModelCore/Map.h
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapGreatCrossingIV.cpp
    src/ModelCore/MapGreatCrossingVI.cpp
    src/ModelCore/MapGreaterCatanIV.cpp
    src/ModelCore/MapGreaterCatanVI.cpp
    src/ModelCore/MapIntoDesertIII.cpp
    src/ModelCore/MapIntoDesertIV.cpp
    src/ModelCore/MapIntoDesertV.cpp
    src/ModelCore/MapIntoDesertVI.cpp
    src/ModelCore/MapNewWorldIII.cpp
    src/ModelCore/MapNewWorldIV.cpp
    src/ModelCore/MapNewWorldV.cpp
    src/ModelCore/MapNewWorldVI.cpp
    src/ModelCore/MapOceansIII.cpp
    src/ModelCore/MapOceansIV.cpp
    src/ModelCore/MapOceansV.cpp
    src/ModelCore/MapOceansVI.cpp
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/TileObject.h
    +src/ModelCore/FiveIslands_V.cpp
    +src/ModelCore/FourIslands_III.cpp
    +src/ModelCore/FourIslands_IV.cpp
    +src/ModelCore/IslandsBase.h
    +src/ModelCore/NewShores.cpp
    +src/ModelCore/OfficialMap.h
    +src/ModelCore/OfficialMapDatabase.cpp
    +src/ModelCore/OfficialMapDatabase.h
    +src/ModelCore/SixIslands_VI.cpp
    +src/ModelCore/StandardBase.h
    +src/ModelCore/Standard_III_IV.cpp
    +src/ModelCore/Standard_V_VI.cpp
    -src/ModelCore/MapCreate.cpp
    -src/ModelCore/MapFiveIslands.cpp
    -src/ModelCore/MapFourIslandsIII.cpp
    -src/ModelCore/MapFourIslandsIV.cpp
    -src/ModelCore/MapNewShores.cpp
    -src/ModelCore/MapSixIslands.cpp
    -src/ModelCore/MapStandard.cpp
    -src/common/define/defineMap.h
    -src/common/define/defineMapCreate.h:
    First wave of map creation overhaul.  The creation of maps is now
    completely generalized.  Woohoo!  The Map class now has a static function
    called CreateMap that takes a Map &, two integers specifying the number of
    tiles in the first row and the number of rows, and a callback function for setting
    specific tile data.  Maps are all now created using actual classes derived
    from Map, which is way, way, way better, as I can take advantage of inheritance
    to avoid repeating map characteristics that are common to all maps in a group
    (like all the Islands maps).  Have Settlers, New Shores, and Islands done, and
    it goes really quickly now that it is so generalized.  Also got to remove
    two more crappy global define headers.  Booyah!
    
2004-10-14  Jason Fugate <jfugate@users.sourceforge.net>
  * src/UICore/BaseNotebook.cpp
    src/UICore/BaseNotebook.h:
    Tab selection now works in wxBaseNotebook.  Still not as pretty
    as I'd like it but mostly functional now.  Need to add minimum
    window size calculation and actually start working on tab windows
    for network layout.

2004-10-13  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/SplashDialog.cpp
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseUI.cpp
    src/UICore/BaseUI.h
    src/UICore/UI.h
    src/UICore/UICore.vcproj
    +src/Cities3D/NetworkConnect.cpp
    +src/Cities3D/NetworkConnect.h
    +src/Cities3D/NetworkDialog.cpp
    +src/Cities3D/NetworkDialog.h
    +src/Cities3D/NetworkNotebook.cpp
    +src/Cities3D/NetworkNotebook.h
    +src/UICore/BaseNotebook.cpp
    +src/UICore/BaseNotebook.h
    +src/UICore/OwnerDrawWindow.cpp
    +src/UICore/OwnerDrawWindow.h:
    Started work on the UI for connecting to a network game.
    New class wxOwnerDrawWindow which is a base class for a lot of other
    UI classes now that draw themselves.  Created a wxBaseNotebook
    in UICore which will be a custom-drawn tab control, since the
    wxWidgets wxNotebook is kind of crappy.  The tab drawing is done, now
    it needs mouse interaction to switch between tabs.
  * distribute/data/mapkey.db
    distribute/data/maps.db
    src/Cities3D/BuildUI.cpp
    src/Cities3D/GameListCtrl.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MessageUI.cpp
    src/Cities3D/TurnUI.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/DatabaseCore/Singleton.h
    src/DatabaseCore/stdwx.cpp
    src/GLCore/BaseGLCanvas.cpp
    src/GLCore/BaseGLCanvas.h
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/GLMaterial.h
    src/GLCore/GLTextures.h
    src/GLCore/SettlersGLCanvas.cpp
    src/GLCore/SettlersGLCanvas.h
    src/GLCore/stdwx.cpp
    src/ModelCore/Controller.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/IGameObject.h
    src/ModelCore/Map.cpp
    src/ModelCore/Map.h
    src/ModelCore/MapCreate.cpp
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapFiveIslands.cpp
    src/ModelCore/MapFourIslandsIII.cpp
    src/ModelCore/MapFourIslandsIV.cpp
    src/ModelCore/MapGreatCrossingIV.cpp
    src/ModelCore/MapGreatCrossingVI.cpp
    src/ModelCore/MapGreaterCatanIV.cpp
    src/ModelCore/MapGreaterCatanVI.cpp
    src/ModelCore/MapIntoDesertIII.cpp
    src/ModelCore/MapIntoDesertIV.cpp
    src/ModelCore/MapIntoDesertV.cpp
    src/ModelCore/MapIntoDesertVI.cpp
    src/ModelCore/MapNewShores.cpp
    src/ModelCore/MapNewWorldIII.cpp
    src/ModelCore/MapNewWorldIV.cpp
    src/ModelCore/MapNewWorldV.cpp
    src/ModelCore/MapNewWorldVI.cpp
    src/ModelCore/MapOceansIII.cpp
    src/ModelCore/MapOceansIV.cpp
    src/ModelCore/MapOceansV.cpp
    src/ModelCore/MapOceansVI.cpp
    src/ModelCore/MapSixIslands.cpp
    src/ModelCore/MapStandard.cpp
    src/ModelCore/PlayerDatabase.cpp
    src/ModelCore/PlayerDatabase.h
    src/ModelCore/TileObject.h
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkServer.cpp
    src/RulesCore/GameEngine.cpp
    src/SeafarersRules/DrawPortObject.cpp
    src/SeafarersRules/LogicPlaceInitialShip.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleRevealHiddenTile.cpp
    src/SeafarersRules/RuleSetPortPlacements.cpp
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/LogicCanEndTurn.cpp
    src/StandardRules/LogicCanPlayCard.cpp
    src/StandardRules/LogicCanTradeBank.cpp
    src/StandardRules/LogicCanTradeOthers.cpp
    src/StandardRules/LogicPlaceInitialCorner.cpp
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicPlaceInitialTile.cpp
    src/StandardRules/LogicTileIsLand.cpp
    src/StandardRules/LogicTileIsOcean.cpp
    src/StandardRules/LogicTileIsPort.cpp
    src/StandardRules/LogicTileIsResource.cpp
    src/StandardRules/RuleChainStandard.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitialResources.cpp
    src/StandardRules/RulePlaceRobber.cpp
    src/UICore/BaseCheckBox.cpp
    src/UICore/BaseListCtrl.cpp
    src/UICore/BaseStaticBox.cpp
    src/UICore/BaseTextCtrl.cpp
    src/UICore/BaseTreeCtrl.cpp
    src/common/define/defineMap.h:
    Hmm, first checkin in 10 days.  Major cleanup of the Map class,
    which is now fully doc'ed.  Numerous other files had to get cleaned up
    as well.  Also reset the background colors in the custom draw classes
    to the background black color, since mambazo hasn't been around in a long
    time and it looks a lot better that way.
2004-10-03  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MainFrame.cpp
    src/CoreRules/CoreOverview.cpp
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/RuleRestartGame.cpp
    src/ModelCore/GameDatabase.cpp
    src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkClient.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/NetworkRules/NetworkSendGame.cpp
    src/NetworkRules/NetworkServer.cpp
    src/RulesCore/INetworkClient.h
    src/RulesCore/INetworkEngine.h
    src/RulesCore/PluginEngine.cpp
    +src/CoreRules/RulePrepareUI.cpp:
    The server now starts a game and sends it to any client that connects,
    and the client properly reads the game data and displays it on screen.
    Neat!
  * src/Cities3D Installer.vdproj
    src/Tex3D/tex3d.vcproj:
    Release 0.1.1.
  * src/CoreRules/CoreOverview.cpp
    src/CoreRules/CoreRules.vcproj
    src/RulesCore/RuleEngine.cpp
    +src/CoreRules/LogicMarkBranch.cpp
    +src/CoreRules/RuleMarkBranch.cpp:
    Fixed up the problem where saving a game in the middle of port
    placements and then reloading it made you go through a whole other
    round of port placements.  The idea behind priority branch logic is
    now set in stone, and it should work for whatever I need it to
    in the future.

2004-10-01  Jason Fugate <jfugate@users.sourceforge.net>
  * src/SeafarersRules/LogicPlaceInitialTileHomeIsland.cpp:
    Fixed bug where and odd # of players couldn't place in the
    TradeRoutes RuleSet (used in Great Crossing maps)

2004-09-30  Jason Fugate <jfugate@users.sourceforge.net>
  * src/GLCore/DrawObject.cpp
    src/ModelCore/Vector.h
    src/StandardRules/DrawTileObject.cpp:
    Optimized up the tile selection.  Works great.  Nice and
    speedy and rock solid.
  * src/StandardRules/DrawTileObject.cpp
    src/StandardRules/DrawTileObject.h:
    First pass at tile selection with raycasting.  Works, but is
    *extremely* unoptimized.  :P
  * src/CoreRules/DrawSideSelectionObject.cpp
    src/CoreRules/DrawSideSelectionObject.h
    src/ModelCore/Vector.h:
    Selection now works again with SideSelectionObjects (a.k.a 
    road/ship placements).  Go vector math!  Last one for now is tiles,
    which should be interesting to determine as they are hexes.

2004-09-29  Jason Fugate <jfugate@users.sourceforge.net>
  * src/NetworkRules/NetworkClient.cpp
    src/NetworkRules/NetworkClient.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/NetworkRules/NetworkRules.vcproj
    src/NetworkRules/NetworkServer.cpp
    src/NetworkRules/NetworkServer.h
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/RulesCore/DataObject.h
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/INetworkClient.h
    src/RulesCore/INetworkEngine.h
    src/RulesCore/INetworkServer.h
    src/RulesCore/IPluginEngine.h
    src/RulesCore/ImageEngine.h
    src/RulesCore/PluginEngine.h
    src/RulesCore/RulesCore.vcproj
    +src/NetworkRules/NetworkSendGame.cpp
    +src/RulesCore/AnyEngine.cpp
    +src/RulesCore/AnyEngine.h
    +src/RulesCore/AnySerializer.cpp
    +src/RulesCore/AnySerializer.h
    +src/RulesCore/DataObject.cpp
    +src/RulesCore/IAnyEngine.h
    +src/RulesCore/IAnySerializer.cpp
    +src/RulesCore/IAnySerializer.h:
    Transitional checkin after working on network code for a while.
    New AnyEngine part of the GameEngine to handle Unserializing boost::any
    objects from the socket stream (or file stream if we ever want to save
    them to disk--game replay?).  A lot of this is still not totally nailed
    down.  Started work on a network rule to send the game data across the
    wire.
  * src/CoreRules/DrawCornerSelectionObject.cpp
    src/GLCore/SettlersGLCanvas.cpp
    src/ModelCore/Utility.cpp:
    Booyah!  Fixed the problem with my ray/plane collision calculation.  Now
    initial placement selection works again for all angles.  Should be faster,
    too.
  * src/Cities3D/BankUI.cpp
    src/CoreRules/DrawCornerSelectionObject.cpp
    src/CoreRules/DrawCornerSelectionObject.h
    src/GLCore/BaseGLCanvas.cpp
    src/GLCore/DrawObject.cpp
    src/GLCore/DrawObject.h
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/SettlersGLCanvas.cpp
    src/GLCore/SettlersGLCanvas.h
    src/ModelCore/Utility.cpp
    src/ModelCore/UtilityGL.h
    src/ModelCore/Vector.h
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/IDrawObject.h:
    Some major (conceptual) rework in the GL code.  Now the camera is
    moved around in the world, instead of the world objects being changed
    themselves.  This is how it should be.  Currently totally revamping the
    selection code to use 3D hit testing with a ray vector from an origin
    point into the world.  Works with no x-axis rotation for initial selection
    points, still needs to be finished and then applied to other selection.
    When done, it should get rid of all GL selection issues.
    
2004-09-25  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/NetworkRules/NetworkEngine.cpp
    src/NetworkRules/NetworkEngine.h
    src/NetworkRules/NetworkRules.vcproj
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/INetworkEngine.h
    src/RulesCore/RulesCore.vcproj
    +src/NetworkRules/NetworkClient.cpp
    +src/NetworkRules/NetworkClient.h
    +src/NetworkRules/NetworkServer.cpp
    +src/NetworkRules/NetworkServer.h
    +src/RulesCore/INetworkClient.cpp
    +src/RulesCore/INetworkClient.h
    +src/RulesCore/INetworkEngine.cpp
    +src/RulesCore/INetworkServer.cpp
    +src/RulesCore/INetworkServer.h:
    Added some basic networking with classes for the client,
    server and network engine.  Added some temporary menu
    commands for running as a server (on localhost) or connecting
    as a client (also on localhost).  These will stick around for
    a while until I write the UI for network, which is still
    ambiguous in my mind right now.  The next major step (and it
    will be major) is making DataObject serializable.  I think it
    will be a little easier than anticipated since we really won't be
    sending anything but primitive datatypes (and maybe wxStrings) over
    the wire.  Still going to need some super template goodness, though.

2004-09-23  Jason Fugate <jfugate@users.sourceforge.net>
  * src/SeafarersRules/HiddenTilesOverview.cpp
    src/SeafarersRules/RulePlaceInitialRoadSeafarers.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/StandardOverview.cpp
    src/StandardRules/StandardRules.vcproj
    +src/SeafarersRules/RuleRevealHiddenTile.cpp
    +src/StandardRules/RulePlaceInitialRoadExtensions.cpp:
    Added the rule to reveal hidden tiles in the HiddenTiles ruleset.
    Now works with initial placements as well.  Will need some refactoring
    for Volcanoes/Jungles when I get to that.
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/PlayerListCtrl.cpp
    src/Cities3D/PlayerListCtrl.h
    Bug fixes for player name whitespace and length and not allowing more than 
    6 players to be added to a hotseat game.
  * src/NetworkRules/NetworkRules.vcproj
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/RulesCore.vcproj
    +src/NetworkRules/NetworkEngine.cpp
    +src/NetworkRules/NetworkEngine.h
    +src/RulesCore/INetworkEngine.h:
    First babiest of baby steps towards network support.
    
2004-09-20  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/Cities3D/ControlsUI.h
    src/CoreRules/DrawSideSelectionObject.cpp
    src/GLCore/SettlersGLCanvas.cpp
    src/SeafarersRules/RuleBuildShipInitialEvaluate.cpp:
    Snuck in one last bug fix for a stupid Release mode crash.
  * src/GLCore/DrawObject.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/HexObject.h
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/StandardOverview.cpp
    src/StandardRules/StandardRules.vcproj
    +src/SeafarersRules/ChiplessTilesOverview.cpp
    +src/SeafarersRules/HiddenTilesOverview.cpp
    +src/SeafarersRules/InitialShipsOverview.cpp
    +src/SeafarersRules/TradeRoutesOverview.cpp
    +src/StandardRules/AroundTheBoardOverview.cpp
    +src/StandardRules/AroundTheBoardPortsOverview.cpp
    +src/StandardRules/RulePlaceRobber.cpp:
    Final doc and cleanup in preparation for 0.1.

2004-09-19  Jason Fugate <jfugate@users.sourceforge.net>
  * src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/ModelCore/Utility.cpp
    src/SeafarersRules/SeafarersOverview.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RulePlaceInitialPlacement.cpp
    src/StandardRules/StandardOverview.cpp
    src/StandardRules/StandardRules.vcproj
    +src/SeafarersRules/LogicPlaceInitialRoadNoCoasts.cpp
    +src/SeafarersRules/LogicPlaceInitialShipNoBorder.cpp
    +src/SeafarersRules/LogicPlaceInitialTileHomeIsland.cpp
    +src/SeafarersRules/LogicPlaceInitialTileInitial.cpp
    +src/SeafarersRules/RulePlaceInitialTradeRoutes.cpp
    +src/StandardRules/RandomTilesOverview.cpp
    +src/StandardRules/RulePlaceInitialExtensions.cpp:
    All the rules are in for initial placements, for all the maps
    and their RuleSets.  Now, just need to clean up a little bit of
    doc and we're ready for 0.1.
  * src/CoreRules/CoreOverview.cpp
    src/CoreRules/CoreRules.vcproj
    src/SeafarersRules/LogicCanBuildShip.cpp
    src/StandardRules/LogicCanBuildCity.cpp
    src/StandardRules/LogicCanBuildRoad.cpp
    src/StandardRules/LogicCanBuildSettlement.cpp
    src/StandardRules/LogicCanBuyDevCard.cpp
    src/StandardRules/LogicPlaceFirstRoad.cpp
    src/StandardRules/LogicPlaceInitialBlock.cpp
    src/StandardRules/LogicPlaceInitialBlockSettlements.cpp
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicPlaceSecondRoad.cpp
    src/StandardRules/LogicRequestInitialPlacement.cpp
    src/StandardRules/LogicRequestInitialRoad.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleBuildCity.cpp
    src/StandardRules/RuleBuildRoad.cpp
    src/StandardRules/RuleBuildSettlement.cpp
    src/StandardRules/RuleBuyDevCard.cpp
    src/StandardRules/RuleContinueInitialPlacements.cpp
    src/StandardRules/RuleDecreaseInitialPlayer.cpp
    src/StandardRules/RuleIncreaseInitialPlayer.cpp
    src/StandardRules/RuleInitialResources.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/RuleLocateInitialRoad.cpp
    src/StandardRules/RulePlaceCity.cpp
    src/StandardRules/RulePlaceFirstSettlement.cpp
    src/StandardRules/RulePlaceInitialPlacement.cpp
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceRoad.cpp
    src/StandardRules/RulePlaceSecondSettlement.cpp
    src/StandardRules/RulePlaceSettlement.cpp
    src/StandardRules/RuleRequestInitialPlacement.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRestartFirstRoad.cpp
    src/StandardRules/RuleRestartSecondRoad.cpp
    src/StandardRules/RuleStartInitialPlacements.cpp
    src/StandardRules/StandardOverview.cpp
    src/StandardRules/StandardRules.vcproj
    +src/CoreRules/RuleMarkerEndInitial.cpp
    +src/CoreRules/RuleMarkerInitialRoad.cpp
    +src/CoreRules/RuleMarkerMiddleInitial.cpp
    +src/CoreRules/RuleMarkerStartInitial.cpp
    +src/StandardRules/DevCardsOverview.cpp
    +src/StandardRules/LogicCanEndTurn.cpp
    +src/StandardRules/LogicCanPlayCard.cpp
    +src/StandardRules/LogicCanTradeBank.cpp
    +src/StandardRules/LogicCanTradeOthers.cpp
    +src/StandardRules/LogicPlaceInitialCorner.cpp
    +src/StandardRules/LogicPlaceInitialRoadNoOceans.cpp
    +src/StandardRules/LogicPlaceInitialTile.cpp
    +src/StandardRules/LogicPlaceInitialTileLand.cpp
    +src/StandardRules/LogicTileIsLand.cpp
    +src/StandardRules/LogicTileIsOcean.cpp
    +src/StandardRules/LogicTileIsPort.cpp
    +src/StandardRules/LogicTileIsResource.cpp
    -src/StandardRules/LogicControls.cpp
    -src/StandardRules/LogicPlaceInitial.cpp
    -src/StandardRules/LogicPlaceInitialLandTile.cpp
    -src/StandardRules/LogicTile.cpp
    -src/StandardRules/RuleMarkerEndInitial.cpp
    -src/StandardRules/RuleMarkerInitialRoad.cpp
    -src/StandardRules/RuleMarkerMiddleInitial.cpp
    -src/StandardRules/RuleMarkerStartInitial.cpp:
    All doc is now updated.  Woohoo!
  * src/Cities3D/app.cpp
    src/SeafarersRules/LogicCanBuildRoadInitialEvaluate.cpp
    src/SeafarersRules/LogicCanBuildShip.cpp
    src/SeafarersRules/LogicCanBuildShipInitialEvaluate.cpp
    src/SeafarersRules/LogicPlaceInitialShip.cpp
    src/SeafarersRules/LogicTileIsLandSeafarers.cpp
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/SeafarersRules/RuleBuildRoadInitialEvaluate.cpp
    src/SeafarersRules/RuleBuildShip.cpp
    src/SeafarersRules/RuleBuildShipInitialEvaluate.cpp
    src/SeafarersRules/RuleEvaluateInitialRoads.cpp
    src/SeafarersRules/RuleGenerateSeafarers.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RulePlaceInitialRoadSeafarers.cpp
    src/SeafarersRules/RulePlaceShip.cpp
    src/SeafarersRules/RuleRequestInitialRoadSeafarers.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    +src/SeafarersRules/LogicPlaceInitialShipNoLand.cpp
    +src/SeafarersRules/SeafarersOverview.cpp:
    Updated doc for Seafarers.

2004-09-18  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/app.cpp
    src/CitiesRules/CitiesRules.vcproj
    src/CitiesRules/LogicPlaceInitialBlockCities.cpp
    src/CitiesRules/LogicPlaceSecondCityRoad.cpp
    src/CitiesRules/LogicRequestSecondCity.cpp
    src/CitiesRules/LogicRequestSecondRoad.cpp
    src/CitiesRules/RuleContinueInitialCities.cpp
    src/CitiesRules/RuleInitializeCities.cpp
    src/CitiesRules/RulePlaceSecondCity.cpp
    src/CitiesRules/RuleRequestSecondCity.cpp
    src/CitiesRules/RuleRestartSecondCity.cpp
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/LogicUpdateMessageUIHotseat.cpp
    src/CoreRules/Rule0.cpp
    src/CoreRules/RuleDecrementPlayer.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/CoreRules/RuleIncrementPlayer.cpp
    src/CoreRules/RuleInitializeData.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RulePlaySound.cpp
    src/CoreRules/RuleRestartGame.cpp
    src/CoreRules/RuleUpdateMessageUI.cpp
    src/SeafarersRules/RuleSetPortPlacements.cpp
    +src/CitiesRules/CitiesOverview.cpp
    +src/CitiesRules/RuleRestartSecondCityRoad.cpp
    +src/CoreRules/CoreOverview.cpp
    +src/CoreRules/RuleRandomizePlayers.cpp
    +src/CoreRules/RuleUIAddPlayer.cpp
    +src/CoreRules/RuleUIChangeColor.cpp
    +src/CoreRules/RuleUIRemovePlayer.cpp
    -src/CitiesRules/RuleRestartSecondRoad.cpp
    -src/CoreRules/RuleUIPlayers.cpp:
    Updated doc for all Cities and Core rules.  Now on to Seafarers
    and then *dread* Standard.
  * src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/CitiesRules/CitiesRules.vcproj
    src/CoreRules/RuleRestartGame.cpp
    src/SeafarersRules/RuleEvaluateInitialRoads.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/BuildDataDevCards.cpp
    src/StandardRules/RulePlaceInitialPlacement.cpp
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceRoad.cpp
    src/StandardRules/RuleRequestInitialPlacement.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/StandardRules.vcproj
    +src/CitiesRules/LogicPlaceSecondCityRoad.cpp
    +src/SeafarersRules/LogicCanBuildRoadInitialEvaluate.cpp
    +src/SeafarersRules/LogicCanBuildShip.cpp
    +src/SeafarersRules/LogicCanBuildShipInitialEvaluate.cpp
    +src/SeafarersRules/RuleBuildRoadInitialEvaluate.cpp
    +src/SeafarersRules/RuleBuildShip.cpp
    +src/SeafarersRules/RuleBuildShipInitialEvaluate.cpp
    +src/SeafarersRules/RulePlaceInitialRoadSeafarers.cpp
    +src/SeafarersRules/RulePlaceShip.cpp
    +src/SeafarersRules/RuleRequestInitialRoadSeafarers.cpp
    +src/SeafarersRules/RuleRestartInitialEvaluate.cpp
    +src/SeafarersRules/defineSounds.h
    +src/StandardRules/LogicCanBuildCity.cpp
    +src/StandardRules/LogicCanBuildRoad.cpp
    +src/StandardRules/LogicCanBuildSettlement.cpp
    +src/StandardRules/LogicCanBuyDevCard.cpp
    +src/StandardRules/LogicPlaceFirstRoad.cpp
    +src/StandardRules/LogicPlaceSecondRoad.cpp
    +src/StandardRules/RuleBuildCity.cpp
    +src/StandardRules/RuleBuildRoad.cpp
    +src/StandardRules/RuleBuildSettlement.cpp
    +src/StandardRules/RuleBuyDevCard.cpp
    +src/StandardRules/RuleLocateInitialRoad.cpp
    -src/CitiesRules/RulePlaceSecondRoad.cpp
    -src/StandardRules/RulePlaceFirstRoad.cpp
    -src/StandardRules/RulePlaceSecondRoad.cpp:
    Whew.  All of the initial placement rules for Seafarers are now in,
    including the ability to choose a road or ship if the situation
    requires it.  Had to tweak a lot of the Standard rules, but that
    was expected.  Now to clean up all of the doc, which is a mess right
    now.  Then, to implement the special placement rules for the other
    map RuleSets (which should consist of just a few Logic pieces in
    various places), and then we'll be ready for 0.1.

2004-09-17  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BuildUI.cpp
    src/RulesCore/LogicTemplate.txt
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/RuleChainStandard.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/RuleTemplate.txt
    +src/SeafarersRules/LogicPlaceInitialShip.cpp
    +src/SeafarersRules/RuleChainSeafarers.cpp
    +src/SeafarersRules/RuleEvaluateInitialRoads.cpp
    +src/StandardRules/RuleMarkerInitialRoad.cpp:
    Added some logic for Seafarers initial ships instead of
    initial roads, need to stub out all the logic bits for the BuildUIs
    so it doesn't complain about them.
  * src/Cities3D/BuildUI.cpp
    src/SeafarersRules/DrawShipObject.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/BuildDataStandard.cpp
    src/StandardRules/ImageSetsDevCards.cpp
    src/StandardRules/ImageSetsStandard.cpp
    src/StandardRules/StandardRules.vcproj
    +distribute/tex/uibuilddevcard.tex
    +src/SeafarersRules/BuildDataSeafarers.cpp
    +src/StandardRules/BuildDataDevCards.cpp
    -distribute/tex/tiny.tex:
    Added Seafarers ships and the dev card image into the build items
    layout.  Now that all the build infrastructure is in place, it is
    super easy.
    
2004-09-16  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/SettlersView.h
    src/DatabaseCore/ConfigDatabase.h
    src/RulesCore/IPluginEngine.h
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/PluginEngine.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/stdwx.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    +src/RulesCore/BuildData.h
    +src/StandardRules/BuildDataStandard.cpp:
    Added BuildData and the fixed up the BuildUI so they show up in the
    proper locations with the proper bitmaps.  Also fixed the warning
    from Loban.

2004-09-14  Loban Rahman <mambazo@users.sourceforge.net>
  * src/Makefile.am:
    Synced build file with current snapshot of code.

2004-09-13  Jason Fugate <jfugate@users.sourceforge.net>
  * src/RulesCore/RuleEngine.cpp
    src/SeafarersRules/RuleChainPortPlacement.cpp:
    Fixed up the PortPlacement rule chain so it works again.
  * src/*/*:
    I realized last night that creating DataObjectPtrs to pass things
    around was ridiculous.  DataObjects have no virtual functions and
    therefore no polymorphism, so there's no reason to pass them around as
    pointers, incurring the cost of dynamic memory allocation every time
    one needs to be created.  So I went through and changed *everything* so
    that it uses DataObjects themselves, not DataObjects wrapped in 
    boost::shared_ptrs.  Ahhh, that feels better.

2004-09-12  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/CitiesRules.vcproj
    src/CitiesRules/RuleChainCities.cpp
    src/CitiesRules/RulePlaceSecondCity.cpp
    src/CitiesRules/RuleRestartSecondCity.cpp
    src/CoreRules/Rule0.cpp
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleEngine.h
    src/SeafarersRules/PortPlacementOverview.cpp
    src/SeafarersRules/RuleChainPortPlacement.cpp
    src/StandardRules/RuleChainStandard.cpp
    src/StandardRules/RulePlaceCity.cpp
    src/StandardRules/RulePlaceFirstRoad.cpp
    src/StandardRules/RulePlaceFirstSettlement.cpp
    src/StandardRules/RulePlaceRoad.cpp
    src/StandardRules/RulePlaceSecondRoad.cpp
    src/StandardRules/RulePlaceSecondSettlement.cpp
    src/StandardRules/RulePlaceSettlement.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRestartFirstRoad.cpp
    src/StandardRules/RuleRestartFirstSettlement.cpp
    src/StandardRules/RuleRestartSecondRoad.cpp
    src/StandardRules/RuleRestartSecondSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    +src/CitiesRules/LogicPlaceInitialBlockCities.cpp
    +src/CitiesRules/LogicRequestSecondCity.cpp
    +src/CitiesRules/LogicRequestSecondRoad.cpp
    +src/CitiesRules/RuleContinueInitialCities.cpp
    +src/CitiesRules/RulePlaceSecondRoad.cpp
    +src/CitiesRules/RuleRestartSecondRoad.cpp
    +src/StandardRules/LogicPlaceInitial.cpp
    +src/StandardRules/LogicPlaceInitialBlock.cpp
    +src/StandardRules/LogicPlaceInitialBlockSettlements.cpp
    +src/StandardRules/LogicPlaceInitialLandTile.cpp
    +src/StandardRules/LogicRequestInitialPlacement.cpp
    +src/StandardRules/LogicRequestInitialRoad.cpp
    +src/StandardRules/RuleContinueInitialPlacements.cpp
    +src/StandardRules/RuleDecreaseInitialPlayer.cpp
    +src/StandardRules/RuleIncreaseInitialPlayer.cpp
    +src/StandardRules/RuleInitialResources.cpp
    +src/StandardRules/RuleMarkerEndInitial.cpp
    +src/StandardRules/RuleMarkerMiddleInitial.cpp
    +src/StandardRules/RuleMarkerStartInitial.cpp
    +src/StandardRules/RulePlaceInitialPlacement.cpp
    +src/StandardRules/RulePlaceInitialRoad.cpp
    +src/StandardRules/RuleRequestInitialPlacement.cpp
    +src/StandardRules/RuleStartInitialPlacements.cpp
    -src/CitiesRules/LogicPlaceInitialSettlementBlockCities.cpp
    -src/StandardRules/LogicPlaceInitialSettlement.cpp
    -src/StandardRules/LogicPlaceInitialSettlementBlock.cpp
    -src/StandardRules/LogicPlaceInitialSettlementBlockSettlements.cpp
    -src/StandardRules/LogicPlaceInitialSettlementLandTile.cpp
    -src/StandardRules/RuleMarkerInitial.cpp
    -src/StandardRules/RuleRequestFirstRoad.cpp
    -src/StandardRules/RuleRequestFirstSettlement.cpp
    -src/StandardRules/RuleRequestInitialSettlement.cpp
    -src/StandardRules/RuleRequestSecondRoad.cpp
    -src/StandardRules/RuleRequestSecondSettlement.cpp:
    Massive overhaul of the initial placements rules.  I feel a lot
    better about the design and the extensibility of it, which
    I did not before.  All Standard and C&K placements should work
    still along with save/load from any point.

2004-09-11  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/CitiesRules/CitiesRules.vcproj
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    +src/CitiesRules/LogicPlaceInitialSettlementBlockCities.cpp
    +src/CitiesRules/RuleRestartSecondCity.cpp
    +src/StandardRules/LogicPlaceInitialSettlementBlock.cpp
    +src/StandardRules/LogicPlaceInitialSettlementBlockSettlements.cpp
    +src/StandardRules/LogicPlaceInitialSettlementLandTile.cpp:
    Finished up initial placements for C&K, including save/load.  Need
    to polish up the doc for it all and then work on getting BuildData
    into the RuleSets.

2004-09-10  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/CitiesRules.vcproj
    src/StandardRules/RuleRequestFirstSettlement.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/RuleRequestSecondSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    src/StandardRules/defineSounds.h
    src/common/RuleSetDatabase.h
    +src/CitiesRules/RuleChainCities.cpp
    +src/CitiesRules/RulePlaceSecondCity.cpp
    +src/CitiesRules/RuleRequestSecondCity.cpp
    +src/StandardRules/RulePlaceCity.cpp:
    First pass at C&K initial placements.  Not done by any means.
  * src/CoreRules/RuleUpdateMessageUI.cpp
    src/DatabaseCore/ConfigDatabase.h
    src/UICore/ClearButton.cpp:
    Fixed some warnings Loban had.
  * src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/RuleIncrementPlayer.cpp
    src/RulesCore/RuleEngine.cpp
    src/StandardRules/RuleChainStandard.cpp
    src/StandardRules/RulePlaceFirstRoad.cpp
    src/StandardRules/RuleRequestFirstRoad.cpp
    src/StandardRules/RuleRequestFirstSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    +src/CoreRules/RuleDecrementPlayer.cpp
    +src/StandardRules/RuleMarkerInitial.cpp
    +src/StandardRules/RulePlaceSecondRoad.cpp
    +src/StandardRules/RulePlaceSecondSettlement.cpp
    +src/StandardRules/RuleRequestSecondRoad.cpp
    +src/StandardRules/RuleRequestSecondSettlement.cpp
    +src/StandardRules/RuleRestartFirstRoad.cpp
    +src/StandardRules/RuleRestartFirstSettlement.cpp
    +src/StandardRules/RuleRestartSecondRoad.cpp
    +src/StandardRules/RuleRestartSecondSettlement.cpp
    -src/StandardRules/RuleRestartInitialRoad.cpp
    -src/StandardRules/RuleRestartInitialSettlement.cpp:
    Finished up initial settlement/road placements in the Standard
    RuleSet, with undo of settlements, and save/load from all states.
    Probably should write up the doc for it now, before I get lazy
    and forget to.  Next up is to get all the variants on initial
    placements done for all other RuleSets.

2004-09-10  gettextize  <bug-gnu-gettext@gnu.org>
  * Makefile.am
      (SUBDIRS): Add m4.
      (ACLOCAL_AMFLAGS): New variable.
      (EXTRA_DIST): New variable.
  * configure.ac
      (AC_CONFIG_FILES): Add po/Makefile.in

2004-09-10  Loban Rahman <mambazo@users.sourceforge.net>
  * src/Makefile.am:
    Synced build file with current snapshot of code.
  * Makefile.am
    configure.ac
    ChangeLog:
    Made initial preperations for gettext (by running gettextize).
    I'm not checking anything in because I suspect I've done something
    linux specific. I need to mess with it some more.
  * src/*:
    Ran my "add newlines to the end of c++ source files that are missing it"
    script. It had been a while. Lots of files changed.
  * src/Cities3D/PlayerUI.cpp:
    ISO C++ does not allow declaring/defining a method with no return type,
    which was the case with SetPlayerName(). Fixed by returning void.

2004-09-09  Jason Fugate <jfugate@users.sourceforge.net>
  * src/ModelCore/CornerObject.cpp
    src/ModelCore/CornerObject.h
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleEngine.h
    src/SeafarersRules/PortPlacementOverview.cpp
    src/SeafarersRules/RuleChainPortPlacement.cpp
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/RuleChainStandard.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    +src/StandardRules/RulePlaceFirstRoad.cpp
    +src/StandardRules/RulePlaceFirstSettlement.cpp
    +src/StandardRules/RulePlaceRoad.cpp
    +src/StandardRules/RulePlaceSettlement.cpp
    +src/StandardRules/RuleRequestFirstRoad.cpp
    +src/StandardRules/RuleRequestFirstSettlement.cpp
    -src/StandardRules/RulePlaceInitialRoad.cpp
    -src/StandardRules/RulePlaceInitialSettlement.cpp:
    Work on initial placements.  Kind of a transitionary checkin as I'm
    really tired and going to bed now but want to get this in.
  * src/Cities3D/app.cpp
    src/CoreRules/RuleIncrementPlayer.cpp
    src/ModelCore/Data.h
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/RulesCore/BaseAccess.h
    src/SeafarersRules/LogicTileIsPortPortPlacement.cpp
    src/SeafarersRules/RuleChainPortPlacement.cpp
    src/SeafarersRules/RuleExaminePortPlacement.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RulePlacePortPlacement.cpp
    src/SeafarersRules/RuleRequestPortOrientation.cpp
    src/SeafarersRules/RuleRequestPortPlacement.cpp
    src/SeafarersRules/RuleRestartInitialPortOrientation.cpp
    src/SeafarersRules/RuleRestartInitialPortPlacement.cpp
    src/SeafarersRules/RuleSetPortPlacements.cpp
    src/SeafarersRules/RuleStartPortPlacement.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    +src/SeafarersRules/PortPlacementOverview.cpp:
    Finished doc for the PortPlacement RuleSet.  It's nice to have
    a RuleSet completely and totally finished, including doc.  Finalized
    the doc layout for Rules and Logic (though only PortPlacement doc is
    actually polished).  Added a new function to Data and BaseAccess so that 
    Rules can remove fields that are no longer needed from the Game data (like
    after port placements are finished, don't need the counter variables 
    anymore).  Uploaded new doc to the site.
  * src/ModelCore/GameDatabase.cpp
    src/ModelCore/GameDatabase.h:
    Fixed DeleteGame in GameDatabase so it actually works.
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/SettlersView.cpp
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/CoreRules/RuleResetTileFlags.cpp
    src/DatabaseCore/ConfigDatabase.h
    src/GLCore/FrameworkGLCanvas.cpp
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h
    src/SeafarersRules/RuleRequestPortOrientation.cpp
    src/SeafarersRules/RuleRequestPortPlacement.cpp
    src/StandardRules/DrawChipObject.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h:
    Fixed the reorder issue with PlayerUIs on New World maps.  Now they
    are perfectly resorted when they finish laying out ports.  Messed around with
    ConfigDatabase some.  Added size memory to all wxBaseDialog-derived dialogs
    so they stay the same size permanently after the user resizes them.  Cleaned
    up some stuff in TileObject--now when it has an ObjectFlag set, it sets it on
    its chip and port objects, too, instead of having to that manually.  Seems to
    be a problem with storing float values in the ConfigDatabase.  I may have to
    remove that since it doesn't seem to be able to read them.

2004-09-08  Jason Fugate <jfugate@users.sourceforge.net>
  * distribute/data/mapkey.db
    distribute/data/maps.db
    src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/SettlersView.cpp
    src/CoreRules/CoreRules.vcproj
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapNewWorldIV.cpp
    src/ModelCore/MapNewWorldV.cpp
    src/ModelCore/TileObject.cpp
    src/RulesCore/GameEngine.cpp
    src/RulesCore/RuleHashMixin.cpp
    src/RulesCore/RulesCore.vcproj
    src/SeafarersRules/RuleChainPortPlacement.cpp
    src/SeafarersRules/RulePlacePortPlacement.cpp
    src/SeafarersRules/RuleRequestPortOrientation.cpp
    src/SeafarersRules/RuleRequestPortPlacement.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/RuleRestartInitialSettlement.cpp
    src/common/RuleSetDatabase.h
    +src/CoreRules/LogicUpdateMessageUIHotseat.cpp
    +src/CoreRules/RuleUpdateMessageUI.cpp
    +src/RulesCore/LogicHashMixin.cpp
    +src/RulesCore/LogicHashMixin.h
    +src/SeafarersRules/RuleRestartInitialPortOrientation.cpp
    +src/SeafarersRules/RuleRestartInitialPortPlacement.cpp
    +src/SeafarersRules/RuleSetPortPlacements.cpp
    -src/SeafarersRules/RuleGeneratePortPlacements.cpp:
    Bunch o' stuff.  Added a new rule, called RuleUpdateMessageUI
    which updates the message window in the upper-left according
    to the given text.  It's a mixin object since the text is different
    depending on what mode you're in (i.e., in hotseat mode, the text says
    "ethereal, place a settlement.", but in network mode, the text
    says either, "Waiting for ethereal to place a settlement.", or 
    "Your turn to place a settlement.")  So, I created a new mixin object
    to handle this, called LogicHashMixin, which is the same thing
    as RuleHashMixin, but uses Logic.  Also finished out most of the
    initial ports stuff, including reloading from disk (which is sweet.. you
    can stop in the middle of it and reload exactly where you were).  Now
    all ports are unknown until the last port is placed (exactly as the
    rules say they whould be), and then all are revealed.  *ALSO*, made
    it so that after the ports are revealed, the players are completely
    reordered, so that there is no advantage for knowing what order you
    go in anymore.  This works, except that I haven't gotten the PlayerUIs
    to update their bitmaps yet (though their colors and names change).
  * distribute/tex/Standard_Small/gltilestandard.tex
    distribute/tex/Vivid/glseaports.tex
    distribute/tex/Vivid/gltilestandard.tex
    distribute/tex/Vivid_Small/gltilestandard.tex
    distribute/tex/glseaports.tex
    distribute/tex/gltilestandard.tex
    src/Cities3D/MainFrame.cpp
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/RuleResetTileFlags.cpp
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/GLTextures.cpp
    src/RulesCore/DataObject.h
    src/RulesCore/GameEngine.cpp
    src/SeafarersRules/DrawPortObject.cpp
    src/SeafarersRules/ImageSetsSeafarers.cpp
    src/SeafarersRules/RuleChainPortPlacement.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RuleRequestPortPlacement.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/ImageSetsStandard.cpp
    src/common/RuleSetDatabase.h
    +src/CoreRules/RuleIncrementPlayer.cpp
    +src/SeafarersRules/LogicTileIsPortPortPlacement.cpp
    +src/SeafarersRules/RuleExaminePortPlacement.cpp
    +src/SeafarersRules/RulePlacePortPlacement.cpp
    +src/SeafarersRules/RuleRequestPortOrientation.cpp:
    Did some more work on initial port placements in A New World.
    Added a new port type called PortRandom that just has a ? as
    its marking with now 3-1 or 2-1 symbol, to show that the
    port is not set yet.  These now show up when placing ports during
    initial port placement and will be revealed at the end after
    all ports have been placed.

2004-09-07  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CoreRules/CoreRules.vcproj
    src/GLCore/DrawObject.cpp
    src/RulesCore/LogicTemplate.txt
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/stdwx.cpp
    src/SeafarersRules/LogicTileIsLandSeafarers.cpp
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGeneratePortPlacements.cpp
    src/SeafarersRules/RuleGenerateSeafarers.cpp
    src/SeafarersRules/RuleInitializeChipless.cpp
    src/SeafarersRules/RuleInitializeHidden.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RuleInitializeTradeRoutes.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/common/RuleSetDatabase.h
    src/common/RuleTemplate.txt
    +src/CoreRules/DrawDummySelectionObject.cpp
    +src/CoreRules/DrawDummySelectionObject.h
    +src/CoreRules/RuleResetTileFlags.cpp
    +src/RulesCore/DummySelectionObject.cpp
    +src/RulesCore/DummySelectionObject.h
    +src/SeafarersRules/RuleChainPortPlacement.cpp
    +src/SeafarersRules/RuleRequestPortPlacement.cpp
    +src/SeafarersRules/RuleStartPortPlacement.cpp:
    Started work on the initial port placement rules for A New
    World maps.  Added a class DummySelectionObject for
    times when selection needs to happen but the drawing is
    handled by other objects.
  * src/Cities3D/GameListCtrl.cpp
    src/Cities3D/GameListCtrl.h
    src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MapListCtrl.h
    src/Cities3D/OpenGameDialog.cpp
    src/Cities3D/OpenGameDialog.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h:
    Added sorting to game and map list controls.
  * src/Cities3D/SplashDialog.cpp
    src/Cities3D/SplashDialog.h
    src/Cities3D/app.cpp:
    Added an "Open A Game" button the splash window.  The layout is
    kind of crappy right now, but it's purely functional, not aesthetic,
    at the moment.
    
2004-09-06  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/app.cpp
    src/Cities3D/cities3d.vcproj
    src/RulesCore/LogicTemplate.txt
    src/SeafarersRules/LogicTileIsLandSeafarers.cpp
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/StandardRules/LogicControls.cpp
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/LogicTile.cpp
    src/StandardRules/LogicTileIsResourceJungle.cpp
    src/StandardRules/LogicTileIsResourceVolcano.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleChainStandard.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/RulePlaySettlementSound.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/RuleRestartInitialRoad.cpp
    src/StandardRules/RuleRestartInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.h
    src/common/RuleTemplate.txt
    Did some messing around with documentation for Rules in
    StandardRules.  Not totally happy with it yet so I'm not 
    updating the main site.
  * src/RulesCore/RuleEngine.cpp:
    Fixed a bug with Undo that only showed up after loading.
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/cities3d.vcproj
    src/Cities3D/stdwx.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/UICore/UI.h
    +src/Cities3D/GameListCtrl.cpp
    +src/Cities3D/GameListCtrl.h
    +src/Cities3D/OpenGameDialog.cpp
    +src/Cities3D/OpenGameDialog.h:
    Added UI for opening saved games.  Right now, the dialog only
    shows games in the incomplete database (because it's not possible
    for any to be in the complete database), but it's ready to be
    expanded in the future.  Had to do some trickery to get around a
    wxWidgets limitation in the PlayerGame serialization, but everything
    works great now.  You can save multiple games, they all show up
    in the open games dialog, and you can just double-click, or select
    and click OK to load that game back up.  Gee, I guess there's nothing
    left to do but start on the rules of the game. :P

2004-09-05  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/RuleInitializeCities.cpp
    src/CoreRules/RuleRestartGame.cpp
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/stdwx.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGenerateSeafarers.cpp
    src/SeafarersRules/RuleInitializeChipless.cpp
    src/SeafarersRules/RuleInitializeHidden.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RuleInitializeTradeRoutes.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/RuleInitializeJungles.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.h
    src/common/RuleTemplate.txt
    +src/RulesCore/RuleHashMixin.cpp
    +src/RulesCore/RuleHashMixin.h
    +src/StandardRules/RuleRestartInitialRoad.cpp
    +src/StandardRules/RuleRestartInitialSettlement.cpp:
    Added in functionality so that the game can be restarted from
    any possible save position.  There's a new type of Rule mixin class
    called RuleHashMixin.  This allows for a string hash to be used to
    lookup exactly which Rule to call, which is perfect for loading a
    game.  Rules should now set the State field in the Game data when
    they change to a new state (like InitialSettlement, InitialRoad, etc.)
    Then, if the game is saved and then loaded from disk, the
    RuleRestartGame, which is derived from RuleHashMixin, calls its
    RuleHashMixin with the current State in the Game data.  Its RuleHashMixin
    looks to see if it has any Rule that matches that State, and if so,
    calls it.  If not, an error is thrown to the screen and the game can't
    be restarted.  There are two new rules, RuleRestartInitialSettlement and
    RuleRestartInitialRoad, which handle the only two States (currently) that the
    Game has.  Also cleaned up one of the mixin macros a bit, explaining
    all the other Rule changes.  Also fixed up the GameEngine's SaveGame function
    so that if you load a game and then save it again, it updates the
    existing game instead of saving a new copy of the game.
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/app.cpp
    src/CitiesRules/KnightObject.h
    src/CoreRules/CoreRules.vcproj
    src/GLCore/SettlersGLCanvas.cpp
    src/GLCore/SettlersGLCanvas.h
    src/ModelCore/AggregatorObject.h
    src/ModelCore/BaseTiledObject.h
    src/ModelCore/ChipObject.h
    src/ModelCore/CornerObject.cpp
    src/ModelCore/CornerObject.h
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/GameDatabase.cpp
    src/ModelCore/GameDatabase.h
    src/ModelCore/HexObject.cpp
    src/ModelCore/HexObject.h
    src/ModelCore/IGameObject.h
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/ModelCore/PortObject.h
    src/ModelCore/SideObject.cpp
    src/ModelCore/SideObject.h
    src/ModelCore/stdwx.cpp
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/GameObjectEngine.cpp
    src/RulesCore/GameObjectEngine.h
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/PluginEngine.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/stdwx.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/UICore/UICore.vcproj
    +src/CoreRules/RuleRestartGame.cpp
    +src/ModelCore/IGameObjectEngine.h
    -src/RulesCore/IGameObjectEngine.h:
    Game serialization now works, and it is sweet.  There's no UI hooked
    up for it yet, and it's hardcoded to just load the first game in 
    the incomplete games database, but that's the next step that will be
    done.  Also need to hook up the Rule hash so that users can save
    and restart at *any* point in the game (yes, even during initial
    placements!).  The gist of the changes is that the GameObjectEngine is
    now passed down to the game (via the IGameObjectEngine interface), which
    calls its CreateGameObject when reading in all the game objects.
    Had to do a wee bit of trickiness with a callback function in the
    GameDatabase so that the proper order of 1. Load Rulesets, 2. Create
    OpenGL View, 3. Load Game Data, 4. Populate OpenGL window was preserved.

2004-09-05  Loban Rahman <mambazo@users.sourceforge.net>
  * src/RulesCore/RuleEngine.cpp:
    Added a missing '&' in front of the class method given to the call
    to bind. There ought to be a way to stop VC7 from accepting this
    non-standard lack of '&' when referring to pointers to class methods
    or functions.

2004-09-04  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MessageUI.cpp
    src/Cities3D/TurnUI.cpp
    src/DatabaseCore/FilePath.cpp
    src/DatabaseCore/FilePath.h
    src/ModelCore/Build.cpp
    src/ModelCore/Chitless.cpp
    src/ModelCore/CornerObject.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/Knights.cpp
    src/ModelCore/Map.cpp
    src/ModelCore/MapFiveIslands.cpp
    src/ModelCore/MapFourIslandsIII.cpp
    src/ModelCore/MapFourIslandsIV.cpp
    src/ModelCore/MapGreatCrossingIV.cpp
    src/ModelCore/MapGreatCrossingVI.cpp
    src/ModelCore/MapGreaterCatanIV.cpp
    src/ModelCore/MapGreaterCatanVI.cpp
    src/ModelCore/MapIntoDesertIII.cpp
    src/ModelCore/MapIntoDesertIV.cpp
    src/ModelCore/MapIntoDesertV.cpp
    src/ModelCore/MapIntoDesertVI.cpp
    src/ModelCore/MapNewShores.cpp
    src/ModelCore/MapNewWorldIII.cpp
    src/ModelCore/MapNewWorldIV.cpp
    src/ModelCore/MapNewWorldV.cpp
    src/ModelCore/MapNewWorldVI.cpp
    src/ModelCore/MapOceansIII.cpp
    src/ModelCore/MapOceansIV.cpp
    src/ModelCore/MapOceansV.cpp
    src/ModelCore/MapOceansVI.cpp
    src/ModelCore/MapSixIslands.cpp
    src/ModelCore/MapStandard.cpp
    src/ModelCore/Player.cpp
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/ModelCore/Prepare.cpp
    src/ModelCore/Recurse.cpp
    src/ModelCore/SideObject.cpp
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h
    src/ModelCore/Trade.h
    src/StandardRules/RuleJungle.h
    src/StandardRules/RuleVolcano.h
    src/common/define/defineFile.h
    -common/define/defineGame.h
    -common/define/defineLanguage.h:
    Got rid of the State enum in the Game class.  Now the State
    of a Game is just a wxString data field in a hash just like any
    other pluggable data field.  This way, any Rule can set the Game state
    to anything it wants to.  That RuleSet will then become responsible
    for getting the game going again from a load from disk.  If it sets
    the state, it should handle the state when loading.  Also got rid of
    two more crappy common/define headers.
  * src/CitiesRules/DrawKnightObject.h
    src/CitiesRules/DrawWallsObject.h
    src/CitiesRules/KnightObject.h
    src/CitiesRules/WallsObject.h
    src/CoreRules/DrawCornerSelectionObject.h
    src/CoreRules/DrawSideSelectionObject.h
    src/GLCore/DrawObject.h
    src/ModelCore/ChipObject.h
    src/ModelCore/IGameObject.h
    src/ModelCore/PortObject.h
    src/ModelCore/TileObject.h
    src/RulesCore/CornerSelectionObject.h
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/PluginEngine.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/SideSelectionObject.h
    src/RulesCore/stdwx.cpp
    src/SeafarersRules/DrawExtraObject.h
    src/SeafarersRules/DrawPirateObject.h
    src/SeafarersRules/DrawPortObject.h
    src/SeafarersRules/DrawShipObject.h
    src/SeafarersRules/ExtraObject.h
    src/SeafarersRules/PirateObject.h
    src/SeafarersRules/ShipObject.h
    src/StandardRules/CityObject.h
    src/StandardRules/DrawChipObject.h
    src/StandardRules/DrawCityObject.h
    src/StandardRules/DrawRoadObject.h
    src/StandardRules/DrawRobberObject.h
    src/StandardRules/DrawSettlementObject.h
    src/StandardRules/DrawTileObject.h
    src/StandardRules/RoadObject.h
    src/StandardRules/RobberObject.h
    src/StandardRules/SettlementObject.h
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    +src/RulesCore/GameObjectEngine.cpp
    +src/RulesCore/GameObjectEngine.h
    +src/RulesCore/IGameObjectEngine.h:
    I'm starting to work on serialization now, so that games can be
    saved and loaded from the disk at will, and in any appropriate
    location.  One of the things I always knew I had to do was to have
    some way of loading IGameObjects in the PlayerGame and Game classes
    where you have no idea how to create those objects because they
    are loaded from the plugin modules.  So, now, I've created the
    GameObjectEngine (which mirrors the DrawObjectEngine) and stores 
    prototype versions of all of the IGameObject-derived classes that
    show up in plugin modules.  Now, when I'm loading from the disk, I can
    read a string that gives the class name of the IGameObject, then
    call the GameObjectEngine through the main GameEngine and request that
    a new version of that IGameObject be created.  Then I can have IT load
    the object off the disk.  This way, everything still stays pluggable.
    Next will be the actual torture of getting all of the data classes to 
    serialize and unserialize properly, and all that it entails with loading
    RuleSets, etc.    
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/PlayerListCtrl.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/SplashDialog.cpp
    src/DatabaseCore/DatabaseCore.vcproj
    src/ModelCore/MapDatabase.cpp
    src/Tex3D/TexDialog.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/common/define/defineUIElements.h
    src/tex3d.sln
    -src/DatabaseCore/LanguageDatabase.cpp
    -src/DatabaseCore/LanguageDatabase.h
    -src/DatabaseCore/LanguageDatabaseGenerate.cpp:
    Removed crappy psuedo-i18n code.  Ahhhhhh... that feels
    good.  Also snuck in a little fix to the splash window
    so you can press ESC to leave.
  * /INSTALL
    /README:
    Updated the README, added INSTALL with Win32 compile instructions.
    
2004-09-03  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/RulesCore/stdwx.cpp:
    At last, at long last, I'm done with RulesCore doc.  FREE!
    FREE AT LAST!  I'M FREEEEEEEEEE!!!!!
  * src/Cities3D/app.cpp
    src/RulesCore/BaseMixin.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/LogicBooleanMixin.h
    src/RulesCore/LogicBranchDefault.h
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/RuleBase.cpp
    src/RulesCore/RuleBase.h
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleEngine.h
    src/RulesCore/RuleExtensionMixin.cpp
    src/RulesCore/RuleExtensionMixin.h
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/common/AIDatabase.cpp
    src/common/AIDatabase.h
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h:
    Finished off all the class documentation (that can be done)
    in RulesCore.  Only thing left is to write up the main
    Overview monster.  It's amazing how much crap I've cleaned up through
    this doc-writing process.  Before I started, I thought everything
    was in pretty good shape.  Now I *know* it's in pretty good 
    shape.
  * src/RulesCore/RuleBase.h:
    Doc for RuleBase.
  * src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/Cities3D/cities3d.vcproj
    src/CitiesRules/CitiesRules.cpp
    src/CitiesRules/RuleInitializeCities.cpp
    src/CoreAI/CoreAI.cpp
    src/CoreRules/CoreRules.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/NetworkRules/NetworkRules.cpp
    src/RulesCore/AI.h
    src/RulesCore/AIAccess.h
    src/RulesCore/AILogic.h
    src/RulesCore/AIRule.h
    src/RulesCore/BaseAccess.h
    src/RulesCore/PluginEngine.h
    src/SeafarersRules/LogicTileIsLandSeafarers.cpp
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGeneratePortPlacements.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/SeafarersRules.cpp
    src/StandardAI/StandardAI.cpp
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicTileIsResourceJungle.cpp
    src/StandardRules/LogicTileIsResourceVolcano.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/RulePlaySettlementSound.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/StandardRules.cpp:
    Wrote up the doc for BaseAccess, and cleaned it up while I was
    at it.  There was no need to access the MAP data down there, since
    anyone can read from it via the GameEngine now.  As a result, lots
    of other files had to get altered.  Updated the site doc, too, and
    copied my local menu.txt onto the one Loban had created as a
    placeholder.  Cross your fingers.  I'm not sure how well it will react
    to being used cross-platform.

2004-09-03  Loban Rahman <mambazo@users.sourceforge.net>
  * src/Test3D/MainFrame.cpp
    src/Test3D/app.cpp:
    Commented out lines that were preventing compilation of Test3D.
  * src/Makefile.am
    distribute/Makefile.am:
    Synced the linux build files with the current snapshot of code.
    WOW! Everything compiled cleanly with no changes in source required.
  * doc/Menu.txt:
    Created a doc directory, which will be the output _and_ project
    directory for NaturalDocs. Generating the docs in linux is as simple
    as running "NaturalDocs -i src -o FramedHTML doc -p doc". In windows,
    it's done automatically through the vcproj file. I'll add it to the
    linux build files later, because i want to make the directory for
    NaturalDocs configurable (and detectable), just like I have it for
    other 3rd-party libraries.
    I commited only default Menu.txt file that was generated. That's the
    only file you custom edited right? Go ahead and commit it over this.

2004-09-02  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/Cities3D/app.cpp
    src/RulesCore/DrawObjectEngine.cpp
    src/RulesCore/ImageEngine.cpp
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/PluginEngine.h
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleEngine.h
    src/RulesCore/SoundEngine.h:
    Finished all of the game engine documentation, which was
    tremendously exciting.  NOT.  Just a few more to go, now.
    The finish line is withing gasping distance.
  * src/Tex3D/TexDialog.cpp
    src/Tex3D/app.cpp
    src/Tex3D/app.h:
    Fixed Tex3D build.
  * src/Cities3D/MainFrame.cpp
    src/GLCore/SettlersGLCanvas.cpp
    src/RulesCore/DrawObjectEngine.cpp
    src/RulesCore/DrawObjectEngine.h
    src/RulesCore/GameEngine.cpp
    src/RulesCore/GameEngine.h
    src/RulesCore/IDrawObjectEngine.h
    src/RulesCore/IImageEngine.h
    src/RulesCore/IUndoable.h
    src/RulesCore/ImageEngine.h:
    Started in on the game engine doc.

2004-09-01  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/RulesCore/CornerSelectionObject.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/SelectionObject.h
    src/RulesCore/SideSelectionObject.h
    src/RulesCore/SoundEngine.h:
    Got all of the SelectionObject doc written up.  Eleven
    more classes to go!

2004-08-31  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/RulesCore/IDrawObject.h
    src/RulesCore/IDrawObjectEngine.h
    src/RulesCore/IImageEngine.h
    src/RulesCore/ILogic.h
    src/RulesCore/IPluginEngine.h
    src/RulesCore/IRule.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/ISoundEngine.h
    src/RulesCore/IUndoable.h:
    Most of the interfaces in RulesCore are now done, with one
    more to go.  I'll be glad when this biyatch is over.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/PlayerUI.cpp
    src/CitiesRules/BankDataCities.cpp
    src/CitiesRules/DrawKnightObject.cpp
    src/CitiesRules/DrawKnightObject.h
    src/CitiesRules/DrawWallsObject.cpp
    src/CitiesRules/DrawWallsObject.h
    src/CoreRules/DrawCornerSelectionObject.cpp
    src/CoreRules/DrawCornerSelectionObject.h
    src/CoreRules/DrawSideSelectionObject.cpp
    src/CoreRules/DrawSideSelectionObject.h
    src/RulesCore/BankData.h
    src/RulesCore/DrawObjectEngine.cpp
    src/RulesCore/IDrawObject.h
    src/RulesCore/IDrawObjectEngine.h
    src/RulesCore/IImageEngine.h
    src/RulesCore/ImageEngine.cpp
    src/RulesCore/ImageEngine.h
    src/RulesCore/Logic.cpp
    src/RulesCore/Logic.h
    src/RulesCore/PlayerData.h
    src/RulesCore/Rule.h
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleSet.h
    src/SeafarersRules/DrawExtraObject.cpp
    src/SeafarersRules/DrawExtraObject.h
    src/SeafarersRules/DrawPortObject.cpp
    src/SeafarersRules/DrawPortObject.h
    src/SeafarersRules/DrawShipObject.cpp
    src/SeafarersRules/DrawShipObject.h
    src/StandardRules/BankDataDevCards.cpp
    src/StandardRules/BankDataStandard.cpp
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/DrawChipObject.h
    src/StandardRules/DrawCityObject.cpp
    src/StandardRules/DrawCityObject.h
    src/StandardRules/DrawRoadObject.cpp
    src/StandardRules/DrawRoadObject.h
    src/StandardRules/DrawRobberObject.cpp
    src/StandardRules/DrawRobberObject.h
    src/StandardRules/DrawSettlementObject.cpp
    src/StandardRules/DrawSettlementObject.h
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/DrawTileObject.h
    src/StandardRules/ImageSetsDevCards.cpp
    src/StandardRules/PlayerDataDevCards.cpp
    src/common/RuleSetDatabase.h:
    More doc work in RulesCore.  Man, there is a lot to do.

2004-08-30  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/GLCore/DrawObject.h
    src/RulesCore/ImageSet.h
    src/RulesCore/PluginEngine.cpp
    src/RulesCore/Rule.cpp
    src/RulesCore/Rule.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h:
    Some more RulesCore documentation.
  * src/CoreRules/RuleGenerateBoard.cpp
    src/ModelCore/ChipObject.cpp
    src/ModelCore/ChipObject.h
    src/ModelCore/Game.cpp
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h:
    Fixed a bug where chip objects weren't randomly rotated.
  * src/RulesCore/Access.h
    src/RulesCore/DataObject.h:
    A wee bit more doc for RulesCore.
  * src/RulesCore/Access.h
    src/RulesCore/BankData.h
    src/RulesCore/BaseAccess.h
    src/RulesCore/BaseMixin.h
    src/RulesCore/CornerSelectionObject.h
    src/RulesCore/DataObject.h
    src/RulesCore/DrawObjectEngine.h
    src/RulesCore/GameEngine.h
    src/RulesCore/IDrawObjectEngine.h
    src/RulesCore/IImageEngine.h
    src/RulesCore/ILogic.h
    src/RulesCore/IPluginEngine.h
    src/RulesCore/IRule.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/ISoundEngine.h
    src/RulesCore/IUndoable.h
    src/RulesCore/ImageEngine.h
    src/RulesCore/ImageSet.h
    src/RulesCore/Logic.h
    src/RulesCore/LogicBooleanMixin.h
    src/RulesCore/LogicBranchDefault.h
    src/RulesCore/PlayerData.h
    src/RulesCore/PluginEngine.h
    src/RulesCore/Rule.h
    src/RulesCore/RuleBase.h
    src/RulesCore/RuleEngine.h
    src/RulesCore/RuleExtensionMixin.h
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/SelectionObject.h
    src/RulesCore/SideSelectionObject.h
    src/RulesCore/stdwx.cpp:
    Doc headers for almost all of the classes in RulesCore.  (Skipped the AI
    stuff for now since it's still extremely volatile.)  Updated the site
    with the layout of empty classes.
  * src/Cities3D/app.cpp
    src/ModelCore/CornerObject.h
    src/ModelCore/HexObject.h
    src/ModelCore/SideObject.h
    src/ModelCore/stdwx.cpp:
    Added doc for the stuff I moved down to ModelCore.  Made the default window
    size 800x600 when starting up, since there's now an Undo button in the ControlsUI.

2004-08-29  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/Cities3D/ControlsUI.cpp
    src/CoreAI/CoreAI.vcproj
    src/GLCore/SettlersGLCanvas.cpp
    src/ModelCore/Controller.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/RulesCore/ILogic.h
    src/RulesCore/IRule.h
    src/RulesCore/IRuleEngine.h
    src/RulesCore/Logic.h
    src/RulesCore/Rule.h
    src/RulesCore/RuleEngine.cpp
    src/RulesCore/RuleEngine.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    +src/ModelCore/CornerObject.cpp
    +src/ModelCore/CornerObject.h
    +src/ModelCore/HexObject.cpp
    +src/ModelCore/HexObject.h
    +src/ModelCore/SideObject.cpp
    +src/ModelCore/SideObject.h
    +src/RulesCore/IUndoable.h
    +src/RulesCore/Logic.cpp
    +src/RulesCore/Rule.cpp
    +src/StandardRules/LogicControls.cpp
    -src/CoreAI/LogicAIExecute.cpp
    -src/CoreAI/LogicAIExecute.h
    -src/RulesCore/CornerObject.cpp
    -src/RulesCore/CornerObject.h
    -src/RulesCore/HexObject.cpp
    -src/RulesCore/HexObject.h
    -src/RulesCore/SideObject.cpp
    -src/RulesCore/SideObject.h:
    Added the framework of Undo to the RuleEngine and fired a tracer
    bullet with it from start to end with the initial settlement placement,
    the undo sound included, even.  I'm not entirely convinced that what
    I would explain it all here, but then, I'll be writing up doc for it in
    the next few days, so why bother.  (Search for IUndoable if you want
    a head start, though).  Also had to move all of the Corner, Side,
    and Hex objects down into ModelCore since PlayerGame held smart pointers to
    them and needed to actually use them.  I'll turn these into interfaces, but
    I had to do something quick and dirty so I could remove a settlement I
    added in RulePlaceInitialSettlement.  Now that RulesCore has shaken out some,
    I'll be concentrating on writing up the doc for it this week.  Still
    debating whether I need to get game serialization tracer bulleted before
    launching into full-on rules writing.  Probably a good idea.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/Cities3D/BuildUI.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/SplashDialog.cpp
    src/Cities3D/TurnUI.cpp
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/CoreAI/LogicAIExecute.cpp
    src/CoreRules/Rule0.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RulePlaySound.cpp
    src/DatabaseCore/DatabaseCore.vcproj
    src/DatabaseCore/stdwx.cpp
    src/GLCore/GLTextures.cpp
    src/GLCore/SettlersGLCanvas.cpp
    src/GLCore/SettlersGLCanvas.h
    src/GLCore/stdwx.cpp
    src/ModelCore/Build.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Knights.cpp
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/Prepare.cpp
    src/ModelCore/Recurse.cpp
    src/RulesCore/BaseAccess.h
    src/RulesCore/BaseMixin.h
    src/RulesCore/DataObject.h
    src/RulesCore/IRule.h
    src/RulesCore/ImageSet.h
    src/RulesCore/LogicBooleanMixin.h
    src/RulesCore/RuleBase.h
    src/RulesCore/RuleExtensionMixin.cpp
    src/RulesCore/RulesCore.vcproj
    src/SeafarersRules/DrawPortObject.cpp
    src/SeafarersRules/RuleGenerateSeafarers.cpp
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/RulePlaySettlementSound.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/ClearButton.cpp
    src/common/RuleSetDatabase.h
    +src/DatabaseCore/Image.cpp
    +src/DatabaseCore/Image.h
    +src/RulesCore/DrawObjectEngine.cpp
    +src/RulesCore/DrawObjectEngine.h
    +src/RulesCore/GameEngine.cpp
    +src/RulesCore/GameEngine.h
    +src/RulesCore/IDrawObjectEngine.h
    +src/RulesCore/IImageEngine.h
    +src/RulesCore/IPluginEngine.h
    +src/RulesCore/IRuleEngine.h
    +src/RulesCore/ISoundEngine.h
    +src/RulesCore/ImageEngine.cpp
    +src/RulesCore/ImageEngine.h
    +src/RulesCore/PluginEngine.cpp
    +src/RulesCore/PluginEngine.h
    +src/RulesCore/RuleEngine.cpp
    +src/RulesCore/RuleEngine.h
    +src/RulesCore/SoundEngine.cpp
    +src/RulesCore/SoundEngine.h
    -src/DatabaseCore/SoundDatabase.cpp
    -src/DatabaseCore/SoundDatabase.h
    -src/RulesCore/DrawObjectDatabase.cpp
    -src/RulesCore/DrawObjectDatabase.h
    -src/RulesCore/ImageDatabase.cpp
    -src/RulesCore/ImageDatabase.h
    -src/RulesCore/PluginDatabase.cpp
    -src/RulesCore/PluginDatabase.h
    -src/RulesCore/RuleDatabase.cpp
    -src/RulesCore/RuleDatabase.h:
    Major reorg of RulesCore.  Now there is just one single Singleton,
    called GameEngine, and all of the other what used to be Singleton database
    classes are children objects under the GameEngine, which manages them
    all.  Created interfaces for all of the databases, so that the objects
    scattered throughout the code that make use of the GameEngine don't need
    to know anything about the specifics of how things are done, just the
    interface to call things with.  GameEngine just provides references
    to objects with those interfaces.  Also renamed everything to end with
    "Engine" instead of "Database" since that more accurately describes what's 
    going on in this particular case.  Moved the SoundDatabase out of DatabaseCore
    and into SoundEngine in RulesCore.  Removed the image manipluation stuff
    from ImageDatabase (which is now ImageEngine) and put it in its own Image namespace
    in DatabaseCore.  Now, everything throughout the game just needs to include
    one header file, GameEngine.h, and it can access the RuleEngine (may split
    into LogicEngine later), DrawObjectEngine, ImageEngine, SoundEngine, and
    PluginEngine.  Now only eight classes are Singletons.  Hmm, now that I think
    about it, I can put Controller into the GameEngine and bump it down to seven.
    Will do that tomorrow.

2004-08-26  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/Cities3D/AddPlayerDialog.h
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/OptionDisplaySize.h
    src/Cities3D/PlayerUI.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/SettingsDialog.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/SettlersView.h
    src/Cities3D/SplashDialog.h
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/Cities3D/stdwx.cpp
    src/GLCore/DrawObject.h
    src/UICore/BaseDialog.h:
    Finished off the rest of the doc for the dialog windows, as well
    as the application classes.  Wrote up a first-pass overview of
    the project in the Cities3D Overview section.  Uploaded all the
    doc to the site again.  Now at least there's something right on
    the front page that's not just a class list.    
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/MapTextCtrl.h
    src/Cities3D/MessageUI.cpp
    src/Cities3D/MessageUI.h
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/PlayerTreeCtrl.h
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/cities3d.vcproj
    src/DatabaseCore/LanguageDatabaseGenerate.cpp
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/SettlersGLCanvas.h
    src/common/define/defineUIElements.h:
    Added more doc for some of the UI elements in Cities3D.
    Cleaned up some other doc.
  
2004-08-25  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/MessageUI.cpp
    src/Cities3D/MessageUI.h
    src/Cities3D/PlayerDataObject.cpp
    src/Cities3D/PlayerDataObject.h
    src/Cities3D/PlayerDropTarget.cpp
    src/Cities3D/PlayerDropTarget.h
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/TurnUI.cpp
    src/Cities3D/TurnUI.h
    src/Cities3D/cities3d.vcproj
    src/Cities3D/stdwx.cpp
    src/GLCore/GLCore.vcproj
    src/GLCore/stdwx.cpp
    src/UICore/UICore.vcproj
    src/UICore/stdwx.cpp
    +src/GLCore/SettlersGLCanvas.cpp
    +src/GLCore/SettlersGLCanvas.h
    +src/UICore/BaseUI.cpp
    +src/UICore/BaseUI.h
    +src/UICore/TraitsUI.cpp
    +src/UICore/TraitsUI.h
    +src/UICore/UI.h
    -src/Cities3D/BaseUI.cpp
    -src/Cities3D/BaseUI.h
    -src/Cities3D/DrawHelper.h
    -src/Cities3D/SettlersGLCanvas.cpp
    -src/Cities3D/SettlersGLCanvas.h
    -src/Cities3D/SettlersGLDraw.cpp
    -src/Cities3D/SettlersGLSelect.cpp
    -src/Cities3D/TraitsUI.cpp
    -src/Cities3D/TraitsUI.h
    -src/Cities3D/UI.h:
    Moved wxSettlersGLCanvas down into GLCore, so that now *all* GL
    window classes are in GLCore.  This also allows any other applications
    (*cough*Maps3D*cough*) access to the class.  Also moved UI, BaseUI, and
    TraitsUI into UICore, for the same reasons.  Cleaned up Cities3D by
    pruning some dead files.  Also updated doc for Cities3D, GLCore, UICore,
    and wrote doc for UI, BaseUI, TraitsUI, and a couple of other Cities3D
    classes.  Finally, reworked the menu system a little in the doc to
    make some nice logical groupings, especially in the main Cities3D project
    since it draws together many disparate class types.
  * src/Cities3D/IPlayerDropTarget.h
    src/Cities3D/MapListCtrl.h
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/MapTextCtrl.h
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/PlayerListCtrl.h
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.h
    src/UICore/BaseCheckBox.h
    src/UICore/BaseListCtrl.h
    src/UICore/BaseStaticBox.h
    src/UICore/BaseStaticText.h
    src/UICore/BaseTextCtrl.h
    src/UICore/BaseTreeCtrl.h
    src/UICore/ClearButton.h
    src/UICore/FreeButton.h:
    A few more Cities3D classes documented.  Site updated, too.    
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/AddPlayerDialog.h
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MapListCtrl.cpp
    src/Cities3D/MapListCtrl.h
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/PlayerListCtrl.cpp
    src/Cities3D/PlayerListCtrl.h
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersGLCanvas.h
    src/ModelCore/Player.cpp
    src/ModelCore/Player.h:
    Doc'ed a few classes in Cities3D proper.  They are a little slower
    going since they are so high-level and depend on so many other things
    to make sense.
  * src/Cities3D/AddPlayerDialog.h
    src/Cities3D/BankUI.h
    src/Cities3D/BaseUI.h
    src/Cities3D/BuildUI.h
    src/Cities3D/ControlsUI.h
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/IPlayerDropTarget.h
    src/Cities3D/MainFrame.h
    src/Cities3D/MapListCtrl.h
    src/Cities3D/MapTextCtrl.h
    src/Cities3D/MessageUI.h
    src/Cities3D/OptionDisplaySize.h
    src/Cities3D/OptionWindow.h
    src/Cities3D/PlayerDataObject.h
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/PlayerDropTarget.h
    src/Cities3D/PlayerListCtrl.h
    src/Cities3D/PlayerTreeCtrl.h
    src/Cities3D/PlayerUI.h
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/SettingsDialog.h
    src/Cities3D/SettlersGLCanvas.h
    src/Cities3D/SettlersView.h
    src/Cities3D/SplashDialog.h
    src/Cities3D/TraitsUI.h
    src/Cities3D/TurnUI.h
    src/Cities3D/UI.h
    src/Cities3D/app.h
    src/Cities3D/stdwx.cpp:
    I couldn't help myself.  I did a first pass, header information only,
    of all the classes in Cities3D proper.  Now, at least, Cities3D shows up
    first in the overall documentation structure.
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/GLCore/BaseGLCanvas.h
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    src/UICore/BaseListCtrl.cpp
    src/UICore/BaseListCtrl.h
    src/UICore/BaseTextCtrl.cpp
    src/UICore/BaseTextCtrl.h
    src/UICore/BaseTreeCtrl.cpp
    src/UICore/BaseTreeCtrl.h
    src/UICore/ClearButton.cpp
    src/UICore/ClearButton.h
    src/UICore/FreeButton.cpp
    src/UICore/FreeButton.h
    src/UICore/ISizer.h
    src/UICore/UICore.vcproj
    src/UICore/stdwx.cpp
    +src/UICore/BaseCheckBox.cpp
    +src/UICore/BaseCheckBox.h
    +src/UICore/BaseStaticBox.cpp
    +src/UICore/BaseStaticBox.h
    +src/UICore/BaseStaticText.cpp
    +src/UICore/BaseStaticText.h
    -src/UICore/ColorCheckBox.cpp
    -src/UICore/ColorCheckBox.h
    -src/UICore/ColorStaticBox.cpp
    -src/UICore/ColorStaticBox.h
    -src/UICore/ColorText.cpp
    -src/UICore/ColorText.h:
    Plowed through all the documentation of UICore, which is done.  Took the opportunity
    to rename some classes to make them all similar.  Now there are Base versions of
    everything except the buttons, which are different enough to warrant their own
    special names.  Only one more Core project to document now.

2004-08-24  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/ModelCore/Vector.h
    src/ModelCore/stdwx.cpp
    src/StandardRules/DrawRobberObject.cpp:
    Finished up the first pass of documentation in ModelCore.  Still need
    to document Game, Player, PlayerGame, Map, GameDatabase, PlayerDatabase, and
    MapDatabase, but they are all still volatile so I'm holding off for
    a while.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BuildUI.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/MessageUI.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersView.cpp
    src/Cities3D/TurnUI.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/CoreRules/RuleUIPlayers.cpp
    src/GLCore/DrawObject.h
    src/GLCore/GLMaterial.h
    src/ModelCore/AggregatorObject.h
    src/ModelCore/Controller.h
    src/ModelCore/Event.h
    src/ModelCore/GameObject.cpp
    src/ModelCore/GameObject.h
    src/ModelCore/IGameObject.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h
    src/ModelCore/Utility.h
    src/ModelCore/UtilityGL.h
    src/ModelCore/UtilityMap.h
    src/ModelCore/stdwx.cpp
    src/RulesCore/CornerObject.cpp
    src/RulesCore/SideObject.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGeneratePortPlacements.cpp
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleJungle.h
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/RulePlaySettlementSound.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/RuleVolcano.h
    +src/ModelCore/Utility.cpp:
    Finished doc for several more ModelCore classes.  Also cleaned up a lot of stuff
    and turned the Utility headers into their own namespaces.  I'm starting to go with
    the idea that all global functions should be in a namespace of some kind.  It makes
    figuring out what's going on a lot easier.
  * src/CoreRules/RuleGenerateBoard.cpp
    src/ModelCore/ChipObject.cpp
    src/ModelCore/ChipObject.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/PortObject.cpp
    src/ModelCore/PortObject.h
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h
    src/ModelCore/stdwx.cpp
    +src/ModelCore/BaseTiledObject.cpp
    +src/ModelCore/BaseTiledObject.h:
    More doc work.  Got PortObject and TileObject written up.  Created a new
    class called BaseTiledObject that both PortObject and ChipObject derive from
    since most of their interface was exactly the same.
    
2004-08-23  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/DatabaseCore/ConfigDatabase.h
    src/DatabaseCore/stdwx.cpp
    src/GLCore/DrawObject.cpp
    src/GLCore/DrawObject.h
    src/GLCore/stdwx.cpp
    src/ModelCore/AggregatorObject.h
    src/ModelCore/ChipObject.cpp
    src/ModelCore/ChipObject.h
    src/ModelCore/Controller.h
    src/ModelCore/Data.cpp
    src/ModelCore/Data.h
    src/ModelCore/Event.h
    src/ModelCore/Game.h
    src/ModelCore/GameDatabase.h
    src/ModelCore/GameObject.h
    src/ModelCore/IGameObject.h
    src/ModelCore/Map.h
    src/ModelCore/MapDatabase.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/Player.h
    src/ModelCore/PlayerDatabase.h
    src/ModelCore/PlayerGame.h
    src/ModelCore/PortObject.h
    src/ModelCore/TileObject.h
    src/ModelCore/stdwx.cpp
    src/RulesCore/IDrawObject.h
    +src/ModelCore/Vector.h:
    More documentation work.  Added all the classes in ModelCore, but
    most of them have either "Still volatile" or "Needs documentation" as the
    only text in their doc.  However, it is nice to have a class list of all
    the available classes on the side of the documentation, even if most of them
    are still empty.  Snuck a Vector.h back into the project since it got too big
    to keep in IGameObject.h.  Will continue to work on filling in doc, for 
    classes that are very stable.  See the doc page on the site for the
    current version of the doc.
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/MessageUI.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/TurnUI.cpp
    src/DatabaseCore/ConfigDatabase.h
    src/DatabaseCore/DatabaseCore.vcproj
    src/DatabaseCore/LanguageDatabase.cpp
    src/DatabaseCore/LanguageDatabase.h
    src/DatabaseCore/Singleton.h
    src/DatabaseCore/SoundDatabase.cpp
    src/DatabaseCore/SoundDatabase.h
    src/DatabaseCore/stdwx.cpp
    src/GLCore/BaseGLCanvas.h
    src/GLCore/DrawObject.cpp
    src/ModelCore/GameDatabase.cpp
    src/ModelCore/IGameObject.h
    src/ModelCore/MapCreate.cpp
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/PlayerDatabase.cpp
    src/ModelCore/Recurse.cpp
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/LogicTile.cpp
    src/UICore/FreeButton.cpp
    +src/DatabaseCore/ColorInfo.cpp
    +src/DatabaseCore/ColorInfo.h
    +src/DatabaseCore/FilePath.cpp
    +src/DatabaseCore/FilePath.h
    -src/DatabaseCore/ColorDatabase.cpp
    -src/DatabaseCore/ColorDatabase.h
    -src/DatabaseCore/FileDatabase.cpp
    -src/DatabaseCore/FileDatabase.h:
    Turned two Singleton objects into namespaces, since they were just providing
    functions and had no actual state to maintain.  Trying to get away from using
    Singletons as a hammer for every problem.  Will probably continue to refactor some
    of them as I get to  them.  Also finished up all the documentation for DatabaseCore
    using NaturalDocs.  Cleaned up the rest of the stuff that was causing crap to
    get into the NaturalDocs output and reuploaded to the site. See 
    http://www.s3dconnector.net/Cities3D/doc/index.html for details.

2004-08-20  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/CoreRules/RulePlaySound.cpp
    src/DatabaseCore/Singleton.h
    src/DatabaseCore/SoundDatabase.h
    src/DatabaseCore/stdwx.cpp
    src/GLCore/BaseGLCanvas.h
    src/GLCore/DrawObject.h
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/GLCore.vcproj
    src/GLCore/GLMaterial.h
    src/GLCore/GLTextures.h
    src/GLCore/stdwx.cpp:
    Finished the NaturalDocs documentation for GLCore.  It's now done, and
    is very cool.  Started on documentation for DatabaseCore.  Make sure you
    update the NaturalDocs Project directory to get the latest menu.txt file,
    which has some custom menu layout specifications in it.

2004-08-19  Jason Fugate <jfugate@users.sourceforge.net>  
  * src/Cities3D/SettlersGLCanvas.cpp
    src/GLCore/BaseGLCanvas.cpp
    src/GLCore/BaseGLCanvas.h
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/GLMaterial.cpp
    src/GLCore/GLMaterial.h
    src/GLCore/GLTextures.cpp
    src/GLCore/GLTextures.h
    src/GLCore/stdwx.cpp:
    Add NaturalDocs to the repository.  Reformatted most of GLCore, with the
    exception of GLMaterial to use NaturalDocs.  It's sweet.  Still need to
    add a build step the .NET solution to automatically generate the doc.
    
2004-08-17  Loban Rahman <loban@users.sourceforge.net>
  * src/Makefile.am
    distribute/Makefile.am:
    Massive changes to reflect massive changes in source files in the
    two weeks that I haven't checked in anything.
  * src/DatabaseCore/DatabaseCore.vcproj
    src/DatabaseCore/SoundDatabase.cpp:
    Changed the #include directive to not use the "api/inc" directory. Added
    the "api/inc" path to the vproj include properties instead. This is
    because the include path will be different in linux.
  * src/ModelCore/IGameObject.h
    src/RulesCore/IDrawObject.h
    src/RulesCore/IRule.h
    src/RulesCore/ILogic.h
    src/RylesCore/BaseAccess.h
    src/RulesCore/RuleExtensionMixin.h
    src/GLCore/BaseGLCanvas.h
    src/Cities3D/UI.h:
    The destructor had both a pure specifier (=0) and a function definition,
    making an impure virtual function, necessary for destructors. Gcc, doesn't
    like the (empty) definition to be right beside the pure specifier (=0) in
    the class declaration. So I moved it outside. It's still in the .h file,
    since there is no .cpp file, but at the bottom, and declared inline.
  * src/RulesCore/BaseAccess.h:
    Needed to add the template keyword after dependent methods.
  * src/RulesCore/PluginDatabase.cpp:
    Gcc refuses to static_cast a void* to a function pointer. You can't even
    use reinterpret_cast because "error: ISO C++ forbids casting between
    pointer-to-function and pointer-to-object". We'll have to use the unsafe
    C-style casting method because, well, it _is_ unsafe. :-P
  * src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/SeafarersRules/DrawShipObject.cpp:
    Tsk. Tsk. If you define a variable inside a for loop declaration, you
    cannot refer to it outside the for loop, unless you want to use obsolete
    C++ of course. :-P
  * src/Test3D/app.cpp:
    Commented out a couple of lines that don't compile. Temporary of course.

2004-08-17  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerDropListCtrl.h
    src/CoreRules/Rule0.cpp
    src/RulesCore/PluginDatabase.cpp
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    +src/RulesCore/LogicBranchDefault.h
    +src/StandardRules/RuleChainStandard.cpp:
    Rulesets can now provide their own rule chain with branching logic.  This
    allows a ruleset to specify a default path through different rules by chaining
    them together with logic.  Each piece of branch logic is also given a priority
    and branch logic with a higher priority takes precedence, so a variant can
    completely alter the rule chain by providing branch logic with higher priority.
    This will be useful, for example, in implementing the rule chain through Cities3D
    that occurs after the dice roll, when barbarians advance, or progress cards are
    received, etc.
  * distribute/sounds/*:
    Removed sounds with spaces in their name and replaced them with versions
    without spaces.
  * src/SeafarersRules/DrawShipObject.cpp
    src/SeafarersRules/DrawShipObject.h
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    +src/SeafarersRules/DrawPirateObject.cpp
    +src/SeafarersRules/DrawPirateObject.h
    +src/SeafarersRules/PirateObject.h:
    Added the pirate object back in, which took about 5 minutes.  I believe
    all of the draw objects for Standard and Seafarers rules are now completely
    done.  The ones remaining for Cities would be the merchant object and the
    metropolis objects, though those were not ever created in any branch of 
    development so they will be completely new objects.  Of course, there's the
    whole barbarian advancement window to think about too, but that's a separate
    issue.
  * distribute/tex/glseaports.tex
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersGLCanvas.h
    src/CoreRules/RuleGenerateBoard.cpp
    src/GLCore/BaseGLCanvas.cpp
    src/GLCore/DrawObject.cpp
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/GLCore.vcproj
    src/ModelCore/AggregatorObject.h
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h
    src/SeafarersRules/ImageSetsSeafarers.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/DrawTileObject.cpp
    +src/ModelCore/PortObject.cpp
    +src/ModelCore/PortObject.h
    +src/SeafarersRules/DrawPortObject.cpp
    +src/SeafarersRules/DrawPortObject.h
    +src/SeafarersRules/RuleGenerateSeafarers.cpp
    -src/GLCore/DisplayList.cpp
    -src/GLCore/DisplayList.h
    -src/GLCore/FrameworkGLDraw.cpp:
    Seafarers-style seaports are now back in the game on Seafarers maps.  I
    am quite pleased at how easy this turned out to be to add back into the 
    game thanks to finally having a decent OO design.  It should be extremely
    easy now to add code to flip the option back and forth now, the way users
    can in the current Sea3D implementation.  Also, I was *finally* able to
    get rid of some crappy files in GLCore that were all commented out.  I think
    GLCore could actually be turned into a static library and simply linked to
    now if we wanted to.  I don't think there will be any more changes to it.

2004-08-16  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/CitiesRules.vcproj
    src/CitiesRules/KnightObject.h
    src/CitiesRules/RuleInitializeCities.cpp
    src/CitiesRules/WallsObject.h
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/Rule0.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/CoreRules/RuleInitializeData.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RulePlaySound.cpp
    src/NetworkRules/NetworkRules.vcproj
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/SeafarersRules/ExtraObject.h
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGeneratePortPlacements.cpp
    src/SeafarersRules/RuleInitializeChipless.cpp
    src/SeafarersRules/RuleInitializeHidden.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RuleInitializeTradeRoutes.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/SeafarersRules/ShipObject.h
    +src/SeafarersRules/LogicTileIsLandSeafarers.cpp
    -src/CitiesRules/KnightObject.cpp
    -src/CitiesRules/RuleInitializeCities.h
    -src/CitiesRules/WallsObject.cpp
    -src/CoreRules/Rule0.h
    -src/CoreRules/RuleFindPorts.h
    -src/CoreRules/RuleGenerateBoard.h
    -src/CoreRules/RuleGeneratePorts.h
    -src/CoreRules/RuleInitializeData.h
    -src/CoreRules/RuleLoadMap.h
    -src/CoreRules/RulePlaySound.h
    -src/NetworkRules/RuleInitializeNetwork.h
    -src/SeafarersRules/ExtraObject.cpp
    -src/SeafarersRules/LogicTileIsResourceSeafarers.h
    -src/SeafarersRules/RuleGenerateChipless.h
    -src/SeafarersRules/RuleGenerateHidden.h
    -src/SeafarersRules/RuleGeneratePortPlacements.h
    -src/SeafarersRules/RuleInitializeChipless.h
    -src/SeafarersRules/RuleInitializeHidden.h
    -src/SeafarersRules/RuleInitializePortPlacement.h
    -src/SeafarersRules/RuleInitializeSeafarers.h
    -src/SeafarersRules/RuleInitializeTradeRoutes.h
    -src/SeafarersRules/ShipObject.cpp:
    Finished cleaning up all of the Rules projects to get rid of
    superfluous header files.  Added a missing file I forgot to in the
    last checkin.
  * src/ModelCore/ChipObject.cpp
    src/ModelCore/ChipObject.h
    src/RulesCore/LogicBooleanMixin.h
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/CityObject.h
    src/StandardRules/LogicPlaceInitialRoad.cpp
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/LogicTile.cpp
    src/StandardRules/LogicTileIsResourceJungle.cpp
    src/StandardRules/LogicTileIsResourceVolcano.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/PlayerDataStandard.cpp
    src/StandardRules/RoadObject.h
    src/StandardRules/RobberObject.h
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/RuleInitializeJungles.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/RulePlaySettlementSound.cpp
    src/StandardRules/RuleRequestInitialRoad.cpp
    src/StandardRules/RuleRequestInitialSettlement.cpp
    src/StandardRules/SettlementObject.h
    src/StandardRules/StandardRules.vcproj
    -src/StandardRules/CityObject.cpp
    -src/StandardRules/LogicPlaceInitialRoad.h
    -src/StandardRules/LogicPlaceInitialSettlement.h
    -src/StandardRules/LogicTileIsLand.h
    -src/StandardRules/LogicTileIsOcean.h
    -src/StandardRules/LogicTileIsPort.h
    -src/StandardRules/LogicTileIsResource.h
    -src/StandardRules/LogicTileIsResourceJungle.h
    -src/StandardRules/LogicTileIsResourceVolcano.h
    -src/StandardRules/LogicTileStandard.h
    -src/StandardRules/RoadObject.cpp
    -src/StandardRules/RobberObject.cpp
    -src/StandardRules/RuleGenerateAroundBoardPorts.h
    -src/StandardRules/RuleGenerateChips.h
    -src/StandardRules/RuleGenerateRandom.h
    -src/StandardRules/RuleInitializeDevCards.h
    -src/StandardRules/RuleInitializeJungles.h
    -src/StandardRules/RuleInitializeStandard.h
    -src/StandardRules/RulePlaceInitialRoad.h
    -src/StandardRules/RulePlaceInitialSettlement.h
    -src/StandardRules/RulePlaySettlementSound.h
    -src/StandardRules/RuleRequestInitialRoad.h
    -src/StandardRules/RuleRequestInitialSettlement.h
    -src/StandardRules/SettlementObject.cpp:
    Major cleanup of StandardRules.  Got rid of a lot of completely unnecessary
    headers, since Rules should never be derived from.
  * src/ModelCore/MapDatabase.cpp:
    Fixed a bug where selecting a map, then running the map selection dialog
    again and selecting a new map would cause *lots* of problems.
  * distribute/data/mapkey.db
    distribute/data/maps.db
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapStandard.cpp
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/StandardRules.vcproj
    src/StandardRules/defineRules.h:
    Fixed a problem with all maps that used the around the board random
    layout of the standard map, but didn't use the around the board port
    laying method the standard map uses as well.  I needed to split the port
    method into another ruleset so that the other maps didn't take it when
    they didn't need it.
  * src/CoreRules/RuleGeneratePorts.cpp:
    Fixed a bug with generating random ports for maps.

2004-08-15  Jason Fugate <jfugate@users.sourceforge.net>
  * src/GLCore/DisplayList.cpp
    src/GLCore/DisplayList.h
    src/GLCore/FrameworkGLDraw.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/IGameObject.h
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/RulePlaceInitialRoad.cpp
    src/StandardRules/RulePlaceInitialSettlement.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/define/defineGL.h
    +src/RulesCore/HexObject.cpp
    +src/RulesCore/HexObject.h
    +src/StandardRules/DrawRobberObject.cpp
    +src/StandardRules/DrawRobberObject.h
    +src/StandardRules/RobberObject.cpp
    +src/StandardRules/RobberObject.h:
    Added the robber back into the draw objects.  For now, it's
    just parked in the center of the board.  Last thing to do are
    the Seafarers port objects.
  * src/GLCore/DisplayList.cpp
    src/GLCore/DisplayList.h
    src/GLCore/FrameworkGLDraw.cpp
    src/ModelCore/IGameObject.h
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/DrawCityObject.cpp
    src/StandardRules/DrawSettlementObject.cpp
    src/common/define/defineGL.h
    +distribute/tex/glextra.tex
    +src/SeafarersRules/DrawExtraObject.cpp
    +src/SeafarersRules/DrawExtraObject.h
    +src/SeafarersRules/DrawShipObject.cpp
    +src/SeafarersRules/DrawShipObject.h
    +src/SeafarersRules/ExtraObject.cpp
    +src/SeafarersRules/ExtraObject.h
    +src/SeafarersRules/PlayerDataSeafarers.cpp
    +src/SeafarersRules/ShipObject.cpp
    +src/SeafarersRules/ShipObject.h:
    Added ships and extra points to the GL framework.
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/PlayerUI.cpp
    src/CitiesRules/CitiesRules.vcproj
    src/CitiesRules/PlayerDataCities.cpp
    src/CitiesRules/RuleInitializeCities.cpp
    +distribute/tex/uicomcard.tex
    +distribute/tex/uiprocard.tex
    +src/CitiesRules/BankDataCities.cpp
    +src/CitiesRules/ImageSetsCities.cpp:
    Cities & Knights PlayerUI is now all hooked up and looking
    good.  Still need to finish up changing all of the GL objects
    into game for Seafarers.
  * distribute/tex/glknights.tex
    src/Cities3D/PlayerUI.cpp
    src/CitiesRules/CitiesRules.vcproj
    src/CitiesRules/PlayerDataCities.cpp
    src/GLCore/FrameworkGLDraw.cpp
    src/RulesCore/ImageDatabase.h
    src/Tex3D/TexDialog.cpp
    src/Tex3D/app.cpp
    src/common/define/defineGL.h
    +src/CitiesRules/DrawKnightObject.cpp
    +src/CitiesRules/DrawKnightObject.h
    +src/CitiesRules/KnightObject.cpp
    +src/CitiesRules/KnightObject.h:
    Added knights to the player stock windows.

2004-08-14  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/CitiesRules.vcproj
    src/GLCore/DisplayList.cpp
    src/GLCore/DisplayList.h
    src/RulesCore/PluginDatabase.cpp
    src/RulesCore/PluginDatabase.h
    src/StandardRules/DrawCityObject.cpp
    src/StandardRules/DrawSettlementObject.cpp
    src/StandardRules/PlayerDataDevCards.cpp
    src/common/define/defineGL.h
    +src/CitiesRules/DrawWallsObject.cpp
    +src/CitiesRules/DrawWallsObject.h
    +src/CitiesRules/PlayerDataCities.cpp
    +src/CitiesRules/WallsObject.cpp
    +src/CitiesRules/WallsObject.h:
    Added city wall objects to C&K.  It's nice when things just show up
    in the player stock window with one line of code.
  * src/Cities3D/PlayerDropListCtrl.cpp:
    Fixed wxASSERT problem when adding a new player.

2004-08-13  Jason Fugate <jfugate@users.sourceforge.net>
  * src/ModelCore/Utility.h:
    Gah!  Use genrand(), not rand()!
  * src/Cities3D/SettlersGLCanvas.cpp
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/DrawCornerSelectionObject.cpp
    src/CoreRules/Rule0.cpp
    src/ModelCore/Game.h
    src/ModelCore/PlayerGame.h
    src/ModelCore/Utility.h
    src/ModelCore/UtilityGL.h
    src/RulesCore/CornerObject.cpp
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/SideObject.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/StandardRules.vcproj
    src/StandardRules/defineSounds.h
    src/common/define/defineGL.h
    src/common/define/defineGame.h
    +src/CoreRules/DrawSideSelectionObject.cpp
    +src/CoreRules/DrawSideSelectionObject.h
    +src/CoreRules/RulePlaySound.cpp
    +src/CoreRules/RulePlaySound.h
    +src/RulesCore/SideSelectionObject.cpp
    +src/RulesCore/SideSelectionObject.h
    +src/StandardRules/LogicPlaceInitialRoad.cpp
    +src/StandardRules/LogicPlaceInitialRoad.h
    +src/StandardRules/LogicTile.cpp
    +src/StandardRules/LogicTileIsLand.h
    +src/StandardRules/LogicTileIsOcean.h
    +src/StandardRules/LogicTileIsPort.h
    +src/StandardRules/LogicTileIsResource.h
    +src/StandardRules/RulePlaceInitialRoad.cpp
    +src/StandardRules/RulePlaceInitialRoad.h
    +src/StandardRules/RulePlaceInitialSettlement.cpp
    +src/StandardRules/RulePlaceInitialSettlement.h
    +src/StandardRules/RulePlaySettlementSound.cpp
    +src/StandardRules/RulePlaySettlementSound.h
    +src/StandardRules/RuleRequestInitialRoad.cpp
    +src/StandardRules/RuleRequestInitialRoad.h
    +src/StandardRules/RuleRequestInitialSettlement.cpp
    +src/StandardRules/RuleRequestInitialSettlement.h
    -src/CoreRules/LogicTile.cpp
    -src/CoreRules/LogicTileIsLand.h
    -src/CoreRules/LogicTileIsOcean.h
    -src/CoreRules/LogicTileIsPort.h
    -src/CoreRules/LogicTileIsResource.h
    -src/StandardRules/RuleGenerateCards.cpp
    -src/StandardRules/RuleGenerateCards.h
    -src/StandardRules/RuleInitial.cpp
    -src/StandardRules/RuleInitial.h:
    Decided I need to get some more rules filled out before
    continuing on with the AI.  Now you can place an initial
    settlement *and* a road for the first player.
  * src/CoreAI/CoreAI.vcproj
    src/RulesCore/AI.h
    src/common/AIDatabase.h
    +src/CoreAI/LogicAIExecute.cpp
    +src/CoreAI/LogicAIExecute.h:
    Just a little framework for AI execution for now.  Still a lot
    more to do.
    
2004-08-12  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CitiesRules/RuleInitializeCities.cpp
    src/CoreAI/CoreAI.vcproj
    src/CoreRules/Rule0.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RuleUIPlayers.cpp
    src/CoreRules/defineRules.h
    src/ModelCore/Data.h
    src/ModelCore/Game.h
    src/ModelCore/Utility.h
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/RulesCore/Access.cpp
    src/RulesCore/Access.h
    src/RulesCore/Logic.h
    src/RulesCore/Rule.h
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RulesCore.vcproj
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RuleInitializeTradeRoutes.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleGenerateCards.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleGenerateRandom.h
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/RuleInitializeJungles.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/AIDatabase.h
    src/common/RuleSetDatabase.h
    +src/CoreAI/defineAI.h
    +src/RulesCore/AIAccess.cpp
    +src/RulesCore/AIAccess.h
    +src/RulesCore/AILogic.h
    +src/RulesCore/AIRule.h
    +src/RulesCore/BaseAccess.h
    +src/RulesCore/ILogic.h
    +src/RulesCore/IRule.h
    +src/StandardRules/LogicTileStandard.h
    -src/StandardRules/LogicTileIsLandStandard.h
    -src/StandardRules/LogicTileIsOceanStandard.h
    -src/StandardRules/LogicTileIsPortStandard.h
    -src/StandardRules/LogicTileIsResourceStandard.h:
    OK, a bunch of refactoring here.  Created actual interfaces for
    Rule and Logic (which is always a good idea, should have done it from
    the start) called IRule and ILogic.  Also abstracted the functionality
    from Access to a class called BaseAccess and added another class called
    AIAccess.  The reason for this is that all Rules and Logic interact directly
    with the Game object itself.  However, with AIs, we want them to be able to
    mess with the Game object without actually changing it, as they do 
    look-ahead planning.  So there is now an AIAccess class, which when called
    with SetGame(), creates a *copy* of the Game object it is passed, and all
    derived objects from AIAccess (which are AIRule and AILogic) use that copied
    Game object and do not in any way affect the real Game object. AIRule and AILogic
    implement the IRule and ILogic interfaces, meaning they can be stored in
    the same main hashes as the normal game rules, though they will interact
    with different game data.  All AIs will now be able to implement AIRules that
    govern their decision making.  I'll be getting to the Core logic next.
  * src/ModelCore/Utility.h:
    Added uniformity checking to the random number generator.
  * src/RulesCore/PluginDatabase.cpp
    src/cities3d.sln
    src/common/AIDatabase.cpp
    src/common/AIDatabase.h
    +src/CoreAI/CoreAI.cpp
    +src/CoreAI/CoreAI.vcproj
    +src/CoreAI/stdwx.cpp
    +src/CoreAI/stdwx.h
    +src/StandardAI/StandardAI.cpp
    +src/StandardAI/StandardAI.vcproj
    +src/StandardAI/stdwx.cpp
    +src/StandardAI/stdwx.h:
    Added CoreAI and StandardAI projects.  They don't contain anything yet, 
    except the proper ProvideAI function, but they do get properly noticed
    by the plugin finder in PluginDatabase.  Just about all of the pieces are
    in place to start work on the actual AI framework in CoreAI.
  * src/RulesCore/AI.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/cities3d.sln
    +src/RulesCore/RulesBase.cpp
    +src/RulesCore/RulesBase.h:
    Removed AICore from the solution and submitted a request to have it
    deleted from CVS.  Created a common base class for AI and Ruleset since
    they share the same idea of a set of rules and logic.  Got things ready
    to add the CoreAI project, which will have the main AI abstract functions
    in it.
    
2004-08-11  Jason Fugate <jfugate@users.sourceforge.net>
  * src/RulesCore/PluginDatabase.cpp
    src/RulesCore/PluginDatabase.h
    src/RulesCore/RulesCore.vcproj
    +src/RulesCore/AI.cpp
    +src/RulesCore/AI.h:
    Added some basic AI loading support into PluginDatabase, though,
    of course, there's nothing to load yet.  Have an empty AI class
    for now, though.  I think AICore is probably unnecessary now after
    thinking about it, so I'm going to remove it in a bit.
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/AddPlayerDialog.h
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/app.cpp
    src/CitiesRules/RuleInitializeCities.cpp
    src/CoreRules/Rule0.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RuleUIPlayers.cpp
    src/ModelCore/Controller.cpp
    src/ModelCore/Controller.h
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/RulesCore/Access.cpp
    src/RulesCore/Access.h
    src/RulesCore/PluginDatabase.cpp
    src/RulesCore/PluginDatabase.h
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RuleInitializeTradeRoutes.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleGenerateCards.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    src/StandardRules/RuleInitializeJungles.cpp
    src/StandardRules/RuleInitializeStandard.cpp:
    More late summer cleaning.  Moved the one and only Game object
    out of Controller and into PluginDatabase.  Now Controller is solely
    responsible for message passing between the game data and the UI, as
    it should be.  PluginDatabase was the natural destination for the Game
    data as it is in charge of all of the resource management with the other
    databases.  I also altered the Access class so that it has a static public
    member called SetGame(), which PluginDatabase calls.  Now, instead of each
    Access-derived class trying to grab the current Game data in its
    constructor, there is simply one static (hidden) variable which holds the 
    current Game for *all* Access-derived classes.  Much safer, and more
    efficient, too.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/TurnUI.cpp
    src/Cities3D/app.cpp
    src/CoreRules/Rule0.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGenerateBoard.cpp
    src/ModelCore/Controller.h
    src/RulesCore/DrawObjectDatabase.h
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/RulesCore/LogicBooleanMixin.h
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RuleExtensionMixin.cpp
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitial.cpp
    +src/RulesCore/PluginDatabase.cpp
    +src/RulesCore/PluginDatabase.h:
    Ahh, the smell of fresh, clean code.  Since plugin managing was a 
    completely independent thing from rule managing, I split all of the
    plugin stuff out of RuleDatabase into its own PluginDatabase.  I also
    completely streamlined all of the resource management for game restarts
    and shutdowns so that it is all now managed in PluginDatabase, which calls
    all of the other dependent databases.  This will make wrapping AI management
    a heck of a lot easier.

2004-08-10  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/app.cpp
    src/Cities3D/cities3d.vcproj
    src/CitiesRules/defineRules.h
    src/SeafarersRules/defineRules.h
    src/StandardRules/defineRules.h
    src/cities3d.sln
    src/common/define/defineHelper.h
    src/*/stdwx.h
    +src/AICore/AI.cpp
    +src/AICore/AI.h
    +src/AICore/AICore.vcproj
    +src/AICore/AIExport.h
    +src/AICore/stdwx.cpp
    +src/AICore/stdwx.h
    +src/common/AIDatabase.cpp
    +src/common/AIDatabase.h:
    First attempt at getting an AI framework in place.  None of this
    does anything yet, it's just placeholders for what I'm trying to
    work out.  Also added a _countof macro to every stdwx.h header
    file since it's extremely useful sometimes.
  * src/CitiesRules/defineRules.h
    src/CoreRules/defineRules.h
    src/NetworkRules/defineRules.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/SeafarersRules/defineRules.h
    src/StandardRules/defineRules.h
    src/common/RuleSetDatabase.cpp:
    Added a new flag to RuleSet that notes whether or not the RuleSet needs
    an AI in order to be played in single player mode.
  * src/Cities3D/SplashDialog.cpp
    src/Cities3D/SplashDialog.h
    src/Cities3D/app.cpp:
    Fixed up that splash screen problem.  Apparently wx, on Win32, anyway,
    has problems displaying a second dialog when its parent is not visible.
    Whatever.  I got it to work by showing the frame before running the
    second dialog.  Not ideal, but good enough.
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/app.cpp
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseDialog.cpp
    src/UICore/ClearButton.cpp
    src/UICore/ClearButton.h
    +distribute/tex/uisplash.tex
    +src/Cities3D/SplashDialog.cpp
    +src/Cities3D/SplashDialog.h
    +src/DatabaseCore/Singleton.h:
    Added a first-pass splash screen with a few buttons.  Only the Play Hotseat
    button does anything right now.  There's also a weird bug, at least on Win32,
    where without the main window being visible, other dialogs don't show up
    immediately unless you click or press a key on the keyboard.  But then they pop
    up right away.  Weird.  Also add the Singleton.h file, which I forgot to 
    yesterday.
    
2004-08-09  Jason Fugate <jfugate@users.sourceforge.net>
  * src/CoreRules/RuleUIPlayers.cpp
    src/ModelCore/Controller.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Utility.h
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/RuleDatabase.cpp
    src/StandardRules/RuleJungle.h
    src/StandardRules/RuleVolcano.h
    -src/common/defineRand.h:
    Switched the randNum function to use % instead of converting to doubles,
    which was silly.  Removed another of the blasted common defines.  Woohoo!
  * src/RulesCore/ImageDatabase.cpp
    src/RulesCore/RuleDatabase.cpp:
    Minor cleanup.
  * src/Cities3D/MapListCtrl.cpp
    src/Cities3D/PlayerDataObject.cpp
    src/DatabaseCore/ColorDatabase.cpp
    src/DatabaseCore/ColorDatabase.h
    src/DatabaseCore/ConfigDatabase.cpp
    src/DatabaseCore/ConfigDatabase.h
    src/DatabaseCore/DatabaseCore.vcproj
    src/DatabaseCore/FileDatabase.cpp
    src/DatabaseCore/FileDatabase.h
    src/DatabaseCore/LanguageDatabase.cpp
    src/DatabaseCore/LanguageDatabase.h
    src/DatabaseCore/SoundDatabase.cpp
    src/DatabaseCore/SoundDatabase.h
    src/ModelCore/Chitless.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/GameDatabase.cpp
    src/ModelCore/GameDatabase.h
    src/ModelCore/Knights.cpp
    src/ModelCore/MapDatabase.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/ModelCore.vcproj
    src/ModelCore/PlayerDatabase.cpp
    src/ModelCore/PlayerDatabase.h
    src/ModelCore/Prepare.cpp
    src/ModelCore/Recurse.cpp
    src/RulesCore/DrawObjectDatabase.cpp
    src/RulesCore/DrawObjectDatabase.h
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/common/HeaderTemplate.txt
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    -src/ModelCore/TempDatabase.cpp
    -src/ModelCore/TempDatabase.h:
    Added a templated Singleton base class which all Singleton objects
    now derive from.  Mmm, DRYer code...

2004-08-08  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/MainFrame.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersView.cpp
    src/GLCore/BaseGLCanvas.cpp
    src/GLCore/BaseGLCanvas.h:
    Had to set the WX_GL_DEPTH_SIZE back to 24 for my home Win32 machine
    as I was getting display artifacts.  We should make this configurable
    somehow.  Right now, I have it __WIN32__ #ifdeffed in MainFrame.cpp.
  * src/Cities3D/PlayerUI.cpp
    src/RulesCore/PlayerData.h
    src/StandardRules/PlayerDataDevCards.cpp
    src/StandardRules/PlayerDataStandard.cpp
    src/common/RuleSetDatabase.h:
    Thresholds are now hooked up in the PlayerUI.  It should be ready
    for action now, which means that the UI is finally done enough to start
    work on other things.  I will now start thinking about allowing for
    AIs to exist in the architecture.
  * src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/TraitsUI.h
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/RulesCore/CornerObject.cpp
    src/RulesCore/CornerObject.h
    src/RulesCore/SideObject.cpp
    src/RulesCore/SideObject.h
    src/StandardRules/CityObject.cpp
    src/StandardRules/RoadObject.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/SettlementObject.cpp:
    PlayerUIs now resize themselves properly in hotseat mode when
    it is not the player's turn.  The code is fairly ugly, but I'm 
    OK with it in this case because it works.  :P  Next up, setting
    threshold values.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/MessageUI.cpp
    src/Cities3D/MessageUI.h
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/TurnUI.cpp
    src/Cities3D/TurnUI.h
    src/ModelCore/Controller.h
    src/RulesCore/Access.h
    src/StandardRules/PlayerDataStandard.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/RuleInitializeDevCards.cpp
    -src/ModelCore/UtilityEvent.h
    -src/common/define/defineUI.h:
    Got rid of all those crappy structs used for the UI events and
    converted them all to DataObjects.  Hooked up PlayerUI's update
    so that it properly updates all the counters for things--still a
    lot of graphical tweaking to do as well as adding thresholds so
    that a UI element can disappear if it is zero and doesn't need
    to be shown.  Also streamlined all of the event names for UI
    pieces so that they are just "event<UI name>" (like "eventTurnUI",
    eventPlayerUI, etc.).  Eventually, I should drop a bunch of 
    defines into Controller.h for all the common events so that we
    don't have tons of raw text strings lying about.
  * src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/RuleUIPlayers.cpp
    src/RulesCore/DataObject.h
    src/RulesCore/RuleDatabase.cpp
    -src/CoreRules/defineStructs.h:
    Generalized DataObject so that has an array of boost::any()
    objects, making it extremely useful for just about every form
    of parameter passing, whether rules or logic, or messages
    passed to the UI.  This will allow me to remove all of the silly
    structs that I had created for the different UI update
    mechanisms and simply use one DataObject to pass all needed
    information.

2004-08-07  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersView.cpp
    src/Cities3D/app.cpp
    src/DatabaseCore/FileDatabase.cpp
    src/DatabaseCore/LanguageDatabase.cpp
    src/DatabaseCore/LanguageDatabase.h
    src/DatabaseCore/LanguageDatabaseGenerate.cpp
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/FrameworkGLDraw.cpp
    src/ModelCore/Build.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/UtilityEvent.h
    src/RulesCore/CornerObject.cpp
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/common/define/defineFile.h
    src/common/define/defineGL.h
    src/common/define/defineGame.h
    src/common/define/defineMap.h
    src/common/define/defineStat.h
    src/common/define/defineUI.h
    -src/common/define/defineEnum.h
    -src/common/define/defineImage.h
    -src/common/define/defineVariants.h:
    Removed a lot of dead code from the common headers.
  * distribute/tex/uipoints.tex
    distribute/tex/uipointsdev.tex
    src/Cities3D/PlayerUI.cpp
    src/ModelCore/UtilityGL.h
    src/RulesCore/CornerObject.cpp
    src/RulesCore/CornerObject.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/ImageSetsStandard.cpp
    src/StandardRules/PlayerDataStandard.cpp
    src/StandardRules/RoadObject.cpp
    src/StandardRules/RoadObject.h
    src/StandardRules/RuleInitial.cpp
    src/common/RuleSetDatabase.h
    +src/RulesCore/SideObject.cpp
    +src/RulesCore/SideObject.h:
    All bitmaps now show up in their proper locations in the PlayerUI.
    Still need to hook up the actual updating, which is next.
  * src/Cities3D/PlayerUI.cpp
    src/Cities3D/SettlersView.cpp
    src/RulesCore/CornerObject.cpp
    src/RulesCore/PlayerData.h
    src/StandardRules/CityObject.cpp
    src/StandardRules/ImageSetsDevCards.cpp
    src/StandardRules/ImageSetsStandard.cpp
    src/StandardRules/PlayerDataDevCards.cpp
    src/StandardRules/PlayerDataStandard.cpp
    src/StandardRules/SettlementObject.cpp
    src/common/RuleSetDatabase.h
    +distribute/tex/uipoints.tex
    +distribute/tex/uipointsck.tex
    +distribute/tex/uipointsdev.tex
    -distribute/tex/uipointsI.tex
    -distribute/tex/uipointsII.tex:
    Added stock settlements and cities to the player ui, as well
    as points, victory points, and soldiers played.  Still need
    to add roads and then start uber-tweaking.

2004-08-06  Jason Fugate <jfugate@users.sourceforge.net>
  * src/ModelCore/ChipObject.h
    src/ModelCore/GameObject.h
    src/ModelCore/IGameObject.h
    src/RulesCore/CornerObject.h
    src/StandardRules/DrawRoadObject.cpp
    src/StandardRules/DrawSettlementObject.cpp
    src/StandardRules/DrawSettlementObject.h
    src/StandardRules/RoadObject.h
    src/StandardRules/StandardRules.vcproj
    +src/StandardRules/CityObject.cpp
    +src/StandardRules/CityObject.h
    +src/StandardRules/DrawCityObject.cpp
    +src/StandardRules/DrawCityObject.h
    -src/StandardRules/DrawBuildObject.cpp
    -src/StandardRules/DrawBuildObject.h:
    Split DrawBuildObject into DrawSettlementObject, DrawRoadObject,
    and DrawCityObject, in preparation for GL-rendered stock bitmaps.
  * +distribute/tex/uipointsI.tex
    +distribute/tex/uipointsII.tex
    -distribute/tex/history.tex:
    Added the basic point bitmaps, removed the old history bitmaps.
  * src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/RulesCore/PlayerData.h
    src/StandardRules/PlayerDataDevCards.cpp
    src/StandardRules/PlayerDataStandard.cpp
    src/Tex3D/app.cpp:
    Add development cards back into the PlayerUI, fixed a problem with
    Tex3D not working.

2004-08-05  Jason Fugate <jfugate@users.sourceforge.net>
  * src/SeafarersRules/RuleGenerateChipless.cpp
    src/StandardRules/RuleGenerateRandom.cpp:
    Fixed some compiler warnings in Release mode.
  * src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/TraitsUI.cpp
    src/Cities3D/cities3d.vcproj
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    +src/RulesCore/PlayerData.h
    +src/StandardRules/PlayerDataDevCards.cpp
    +src/StandardRules/PlayerDataStandard.cpp
    -src/Cities3D/BitmapPair.cpp
    -src/Cities3D/BitmapPair.h
    -src/Cities3D/PlayerPair.cpp
    -src/Cities3D/PlayerPair.h
    -src/Cities3D/ResourceTriple.cpp
    -src/Cities3D/ResourceTriple.h:
    First wave of PlayerUI refactoring to make things work.  I've got
    a lot of architecture in place and resource cards are showing up again
    in more or less the right location.  Much more to be done still.
    Hopefully by the end of the weekend I will have everything back to its
    rightful location.
  * src/RulesCore/RuleDatabase.cpp
    Fixed bug where I forgot to add mLoadedRulesets to the clear() function.
  * src/ModelCore/Controller.h
    src/ModelCore/Event.h:
    After looking at the Standard a little more, I realized that
    static_cast<> is sufficient for converting to and from void *, so
    I replaced the places where I had reinterpret_cast doing it.  When
    would you ever use reinterpret_cast?  :P
  * src/UICore/ClearButton.cpp
    src/UICore/ClearButton.h:
    Fixed up wxClearButton so that on resize events, it updates
    its font size so that it stays proportional to the button size.

2004-08-04  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BankUI.cpp
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/MapTextCtrl.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/StandardRules/ImageSetsStandard.cpp
    src/StandardRules/StandardRules.vcproj
    src/StandardRules/defineRules.h
    +src/StandardRules/BankDataDevCards.cpp
    +src/StandardRules/ImageSetsDevCards.cpp
    +src/StandardRules/RuleInitializeDevCards.cpp
    +src/StandardRules/RuleInitializeDevCards.h:
    Turned Development Cards into their own RuleSet, which
    makes it a LOT easier to not load them when we want 
    C&K rules, and vice versa.  Also hooked up the logic
    so that you can turn on C&K in the map selection dialog
    and it will try and load the CitiesRules/Cities ruleset,
    though it ASSERTs like crazy and crashes, right now.
    Development Cards now show up in the bank, as well.
  * src/DatabaseCore/SoundDatabase.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/StandardRules.vcproj
    +src/StandardRules/defineSounds.h:
    Fixed up some missing files and sound initialization 
    problems.
  * src/DatabaseCore/DatabaseCore.vcproj
    src/DatabaseCore/FileDatabase.cpp
    src/DatabaseCore/FileDatabase.h
    src/DatabaseCore/SoundDatabase.cpp
    src/DatabaseCore/SoundDatabase.h
    src/ModelCore/Build.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Knights.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/StandardRules.vcproj
    +distribute/sounds/Chat Message Received.mp3
    +distribute/sounds/Earn Extra Points.mp3
    +distribute/sounds/End Turn.mp3
    +distribute/sounds/Jungle.mp3
    +distribute/sounds/Largest Army.mp3
    +distribute/sounds/Longest Road.mp3
    +distribute/sounds/Lose Cards on 7.mp3
    +distribute/sounds/Lose Game.mp3
    +distribute/sounds/Move Ship.mp3
    +distribute/sounds/New Connector Game.mp3
    +distribute/sounds/Place City.mp3
    +distribute/sounds/Place Pirate.mp3
    +distribute/sounds/Place Road.mp3
    +distribute/sounds/Place Robber.mp3
    +distribute/sounds/Place Settlement On Port.mp3
    +distribute/sounds/Place Settlement.mp3
    +distribute/sounds/Place Ship.mp3
    +distribute/sounds/Play Monopoly Card.mp3
    +distribute/sounds/Play Road Building Card.mp3
    +distribute/sounds/Play Soldier Card.mp3
    +distribute/sounds/Play VP Card.mp3
    +distribute/sounds/Play Year of Plenty Card.mp3
    +distribute/sounds/Player Join.mp3
    +distribute/sounds/Player Leave.mp3
    +distribute/sounds/Roll Dice.mp3
    +distribute/sounds/Start Special Build.mp3
    +distribute/sounds/Steal a Card.mp3
    +distribute/sounds/Trade Accept.mp3
    +distribute/sounds/Trade Offer.mp3
    +distribute/sounds/Trade Reject.mp3
    +distribute/sounds/Trade To Bank.mp3
    +distribute/sounds/Trade.mp3
    +distribute/sounds/Undo.mp3
    +distribute/sounds/Volcanic Destruction.mp3
    +distribute/sounds/Volcanic Eruption.mp3
    +distribute/sounds/Win Game.mp3
    +distribute/sounds/Your Turn.mp3
    -common/define/defineSound.h:
    Added fmod as the sound library.  It is now stored in a sibling
    directory of boost, cppunit, etc.  The directory is fmod and there
    is a subdirectory called win32 for the Win32 version of the library.
    The Linux version should be downloaded and added in a linux 
    subdirectory.  The only project that needs to know about fmod is
    DatabaseCore.  Look in SoundDatabase.cpp for a TODO to hook up
    any Linux paramters that need specifying.  Other than that, everything
    else is done and ready to go.
    
2004-08-03  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    +src/RulesCore/BankData.h
    +src/StandardRules/BankDataStandard.cpp:
    At last, the BankUI is now completely plugged in, with now
    actual knowledge of what's in the bank.  A RuleSet can now
    provide little bits of information in the BankData struct
    that the BankUI then queries for and builds its GL-rendered
    images out of.  Next up: PlayerData, which is going to 
    kick my ass.  Oh yeah, need to add dev cards back into the
    bank for StandardRules, too.

2004-08-02  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/CoreRules/CoreRules.vcproj
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RuleUIPlayers.cpp
    src/CoreRules/defineRules.h
    src/NetworkRules/NetworkRules.vcproj
    src/RulesCore/DataObject.h
    src/RulesCore/LogicBooleanMixin.h
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/LogicTileIsResourceJungle.cpp
    src/StandardRules/LogicTileIsResourceVolcano.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitial.cpp
    +src/CoreRules/defineStructs.h:
    boost::any, where have you been all my life?  DataObject is now
    a sweet little thing that holds any kind of data thanks
    to boost::any.  Read access is done by templates and write access
    is done by a templated constructor, which damn well better be valid
    in the C++ standard, or I'll be pissed. :P  The great thing about
    the templated constructor is that very little code had to change,
    just needed to turn all the specialized accessors into read<> calls.
    Also had to, annoyingly, add two explicit #include "../CoreRules/defineStructs.h"
    lines into the Player*Ctrl .cpp files because I couldn't think of
    a way to allow the PlayerColor struct to be visible to both those files
    and in the CoreRules player ui rules where it is decoded.  Ideas
    welcome.  I'm trying to avoid centralized repositories.
  * src/Cities3D/TurnUI.cpp
    src/CoreRules/ImageSetsCore.cpp
    src/SeafarersRules/ImageSetsHidden.cpp
    src/SeafarersRules/ImageSetsSeafarers.cpp
    src/StandardRules/DrawBuildObject.cpp
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/ImageSetsJungles.cpp
    src/StandardRules/ImageSetsStandard.cpp
    src/StandardRules/ImageSetsVolcanoes.cpp
    src/Tex3D/app.cpp
    src/common/RuleSetDatabase.h:
    +distribute/tex/Standard_Small/gltilehidden.tex
    +distribute/tex/Standard_Small/gltilejungle.tex
    +distribute/tex/Standard_Small/gltilestandard.tex
    +distribute/tex/Standard_Small/gltilevolcano.tex
    +distribute/tex/Vivid/glbarbarians.tex
    +distribute/tex/Vivid/glseaports.tex
    +distribute/tex/Vivid/gltilegold.tex
    +distribute/tex/Vivid/gltilehidden.tex
    +distribute/tex/Vivid/gltilejungle.tex
    +distribute/tex/Vivid/gltilestandard.tex
    +distribute/tex/Vivid/gltilevolcano.tex
    +distribute/tex/Vivid/uirescard.tex
    +distribute/tex/Vivid_Small/gltilegold.tex
    +distribute/tex/Vivid_Small/gltilehidden.tex
    +distribute/tex/Vivid_Small/gltilejungle.tex
    +distribute/tex/Vivid_Small/gltilestandard.tex
    +distribute/tex/Vivid_Small/gltilevolcano.tex
    +distribute/tex/glbarbarians.tex
    +distribute/tex/glchips.tex
    +distribute/tex/glcity.tex
    +distribute/tex/glknights.tex
    +distribute/tex/glroad.tex
    +distribute/tex/glseaports.tex
    +distribute/tex/glsettlement.tex
    +distribute/tex/glship.tex
    +distribute/tex/gltilegold.tex
    +distribute/tex/gltilehidden.tex
    +distribute/tex/gltilejungle.tex
    +distribute/tex/gltilestandard.tex
    +distribute/tex/gltilevolcano.tex
    +distribute/tex/glwalls.tex
    +distribute/tex/uibuttons.tex
    +distribute/tex/uidevcard.tex
    +distribute/tex/uidiceI.tex
    +distribute/tex/uidiceII.tex
    +distribute/tex/uirescard.tex
    -distribute/tex/Standard_Small/tilegold.tex
    -distribute/tex/Standard_Small/tilehidden.tex
    -distribute/tex/Standard_Small/tilejungle.tex
    -distribute/tex/Standard_Small/tiles.tex
    -distribute/tex/Standard_Small/tilevolcano.tex
    -distribute/tex/Vivid/barbarians.tex
    -distribute/tex/Vivid/res.tex
    -distribute/tex/Vivid/seaports.tex
    -distribute/tex/Vivid/tilegold.tex
    -distribute/tex/Vivid/tilehidden.tex
    -distribute/tex/Vivid/tilejungle.tex
    -distribute/tex/Vivid/tiles.tex
    -distribute/tex/Vivid/tilevolcano.tex
    -distribute/tex/Vivid_Small/tilegold.tex
    -distribute/tex/Vivid_Small/tilehidden.tex
    -distribute/tex/Vivid_Small/tilejungle.tex
    -distribute/tex/Vivid_Small/tiles.tex
    -distribute/tex/Vivid_Small/tilevolcano.tex
    -distribute/tex/barbarians.tex
    -distribute/tex/chips.tex
    -distribute/tex/city.tex
    -distribute/tex/diceI.tex
    -distribute/tex/diceII.tex
    -distribute/tex/knights.tex
    -distribute/tex/res.tex
    -distribute/tex/road.tex
    -distribute/tex/seaports.tex
    -distribute/tex/settlement.tex
    -distribute/tex/ship.tex
    -distribute/tex/tilegold.tex
    -distribute/tex/tilehidden.tex
    -distribute/tex/tilejungle.tex
    -distribute/tex/tiles.tex
    -distribute/tex/tilevolcano.tex
    -distribute/tex/ui.tex
    -distribute/tex/walls.tex:
    Cleaned up the .tex files by renaming anything that is a gl texture to
    have 'gl' as the prefix and anything that goes in the UI to have 'ui' as
    the prefix.  Fixed a bug in Tex3D that might have been causing crash/hangs
    on exit.

2004-08-01  Loban Rahman <loban@users.sourceforge.net>
  * src/Makefile.am:
    Updated to reflect Jason's massive changes so far.
  * src/cities3d.sln
    src/tex3d.sln
    src/test3d.sln:
    Added src/Makefile.am (and ChangeLog) to the solutions for easy access.
  * src/DatabaseCore/ConfigDatabase.h:
    When using the wxCOMPILE_TIME_ASSERT() macro, the second argument must be
    a valid c++ identifier, NOT a string. See wxWidgets documentation.
  * src/GLCore/DrawObject.cpp:
    Gcc won't allow the call to the templated function to take an instantiation
    of wxInt32 as an argument. The argument had to be instantiated earlier, and
    a variable passed. This is because, I think, according to the C++
    standards, you can only pass a temp variable (on instantiated but not
    assigned) to a function whose argument was pass-by-copy or
    pass-by-CONST-reference-or-pointer. I think.
  * src/Test3D/test3d.xpm:
    Changed the internal name of the xpm to the correct form.

2004-08-01  Jason Fugate <jfugate@users.sourceforge.net>
 *  distribute/tex/ui.tex
    src/CoreRules/RuleFindPorts.cpp
    src/GLCore/GLTextures.cpp
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/UICore/ClearButton.cpp
    src/UICore/ClearButton.h
    Fixed up some UI problems.  Resized the wxClearButton bitmap so that
    it's 150x40 instead of 75x20, so now it looks decent when scaling with
    a total UI resize.  For some reason, had forgotten to add PortClay to
    the list of valid ports, so fixed that.  Fixed a bug with building
    mipmapped GL textures where they were flipped.
 *  src/CoreRules/ImageSetsCore.cpp
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/StandardRules/ImageSetsStandard.cpp
    src/Tex3D/app.cpp
    src/Tex3D/tex3d.vcproj
    src/UICore/stdwx.h
    src/tex3d.sln
    +distribute/tex/ui.tex
    -distribute/tex/buttons.tex:
    Fixed up Tex3D since it didn't work anymore with an image
    set to use.  Renamed buttons.tex to ui.tex since it was a 
    more accurate descriptor.
 *  src/UICore/ClearButton.cpp
    src/UICore/ClearButton.h
    Fixed the bug where resizing the control panel would not change
    the size of the wxClearButtons.  Added an OnSize handler to 
    wxClearButton so that it takes care of it itself.  It looks like
    hairy man ass right now because the internal bitmap has not been 
    recreated at a higher resolution but at least it shows the proper
    size bitmap now.
 *  src/GLCore/GLTextures.cpp
    src/GLCore/GLTextures.h
    src/RulesCore/RuleDatabase.cpp
    src/StandardRules/DrawTileObject.cpp
    +src/SeafarersRules/ImageSetsHidden.cpp
    +src/SeafarersRules/ImageSetsSeafarers.cpp
    +src/StandardRules/ImageSetsJungles.cpp
    +src/StandardRules/ImageSetsVolcanoes.cpp
    Rehooked DrawTileObject back up so it draws tiles properly.
    Now, thanks to the image sets concept, it knows nothing about
    what the actual tiles are, it just matches up images from
    the image sets with the key 'TileType' with the type given
    by the TileObject itself.  Now, *any* kind of wacky tile
    can be added into the system without any global knowledge
    of it.
 *  distribute/tex/Standard_Small/tiles.tex
    distribute/tex/Vivid/tiles.tex
    distribute/tex/Vivid_Small/tiles.tex
    distribute/tex/tiles.tex
    src/Cities3D/BuildUI.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/app.cpp
    src/CoreRules/CoreRules.vcproj
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/StandardRules.vcproj
    src/UICore/BaseDialog.cpp
    src/UICore/ClearButton.cpp
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    distribute/tex/Standard_Small/tilegold.tex
    +distribute/tex/Standard_Small/tilehidden.tex
    +distribute/tex/Standard_Small/tilejungle.tex
    +distribute/tex/Standard_Small/tilevolcano.tex
    +distribute/tex/Vivid/tilegold.tex
    +distribute/tex/Vivid/tilehidden.tex
    +distribute/tex/Vivid/tilejungle.tex
    +distribute/tex/Vivid/tilevolcano.tex
    +distribute/tex/Vivid_Small/tilegold.tex
    +distribute/tex/Vivid_Small/tilehidden.tex
    +distribute/tex/Vivid_Small/tilejungle.tex
    +distribute/tex/Vivid_Small/tilevolcano.tex
    +distribute/tex/tilegold.tex
    +distribute/tex/tilehidden.tex
    +distribute/tex/tilejungle.tex
    +distribute/tex/tilevolcano.tex
    +src/CoreRules/ImageSetsCore.cpp
    +src/RulesCore/ImageSet.cpp
    +src/RulesCore/ImageSet.h
    +src/StandardRules/ImageSetsStandard.cpp
    -distribute/tex/Standard_Small/special.tex
    -distribute/tex/Vivid/special.tex
    -distribute/tex/Vivid_Small/seaborders.tex
    -distribute/tex/Vivid_Small/special.tex
    -distribute/tex/special.tex:
    RuleSets now contain ImageSets, which define a .tex file
    and what is in it, also giving a key by which that image
    set can be searched.  The tiles still aren't fixed up to
    draw but that's next on the list.  I split out all of the
    .tex files into constituent units that correspond to
    differing rulesets.
 *  distribute/data/mapkey.db
    distribute/data/maps.db
    src/CoreRules/RuleGeneratePorts.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapFiveIslands.cpp
    src/ModelCore/MapFourIslandsIII.cpp
    src/ModelCore/MapFourIslandsIV.cpp
    src/ModelCore/MapGreatCrossingIV.cpp
    src/ModelCore/MapGreatCrossingVI.cpp
    src/ModelCore/MapGreaterCatanIV.cpp
    src/ModelCore/MapGreaterCatanVI.cpp
    src/ModelCore/MapIntoDesertIII.cpp
    src/ModelCore/MapIntoDesertIV.cpp
    src/ModelCore/MapIntoDesertV.cpp
    src/ModelCore/MapIntoDesertVI.cpp
    src/ModelCore/MapNewShores.cpp
    src/ModelCore/MapNewWorldIII.cpp
    src/ModelCore/MapNewWorldIV.cpp
    src/ModelCore/MapNewWorldV.cpp
    src/ModelCore/MapNewWorldVI.cpp
    src/ModelCore/MapOceansIII.cpp
    src/ModelCore/MapOceansIV.cpp
    src/ModelCore/MapOceansV.cpp
    src/ModelCore/MapOceansVI.cpp
    src/ModelCore/MapSixIslands.cpp
    src/ModelCore/TileObject.cpp
    src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/StandardRules/LogicTileIsResourceJungle.cpp
    src/StandardRules/LogicTileIsResourceVolcano.cpp
    src/StandardRules/LogicTileStandard.cpp
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp:
    Changed wxT("Type") to wxT("TileType") when getting
    the tile type out of a tile object.  It's less
    ambiguous.
 *  src/RulesCore/RuleDatabase.cpp
    src/StandardRules/RuleInitial.cpp:
    Some minor cleanup from the last checkin.

2004-07-31  Jason Fugate <jfugate@users.sourceforge.net>
 *  src/CoreRules/CoreRules.vcproj
    src/RulesCore/LogicBooleanMixin.h
    src/RulesCore/RuleDatabase.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/LogicPlaceInitialSettlement.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/StandardRules.vcproj
    src/StandardRules/defineRules.h
    src/common/define/defineGame.h
    +src/CoreRules/LogicTile.cpp
    +src/CoreRules/LogicTileIsLand.h
    +src/CoreRules/LogicTileIsOcean.h
    +src/CoreRules/LogicTileIsPort.h
    +src/CoreRules/LogicTileIsResource.h
    +src/SeafarersRules/LogicTileIsResourceSeafarers.cpp
    +src/SeafarersRules/LogicTileIsResourceSeafarers.h
    +src/StandardRules/LogicTileIsLandStandard.h
    +src/StandardRules/LogicTileIsOceanStandard.h
    +src/StandardRules/LogicTileIsPortStandard.h
    +src/StandardRules/LogicTileIsResourceJungle.cpp
    +src/StandardRules/LogicTileIsResourceJungle.h
    +src/StandardRules/LogicTileIsResourceStandard.h
    +src/StandardRules/LogicTileIsResourceVolcano.cpp
    +src/StandardRules/LogicTileIsResourceVolcano.h
    +src/StandardRules/LogicTileStandard.cpp:
    Filled in the rest of the Logic needed to determine tile
    types.  Now we get a GL window back up, though the tile textures
    are off for now.  Also added a _TIMING define to RuleDatabase.cpp
    that can be turned on to get timings of rule and logic
    execution in the debug log.  This was necessary because
    I was not checking to see if a mixin had already been
    populated and so it was populating it again EVERY TIME, leading
    to massive, massive slowdown.  Fixed now, though.
 *  distribute/data/mapkey.db
    distribute/data/maps.db
    src/CitiesRules/RuleInitializeCities.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/CoreRules/RuleGeneratePorts.cpp
    src/ModelCore/Controller.h
    src/ModelCore/Data.cpp
    src/ModelCore/Data.h
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapFiveIslands.cpp
    src/ModelCore/MapFourIslandsIII.cpp
    src/ModelCore/MapFourIslandsIV.cpp
    src/ModelCore/MapGreatCrossingIV.cpp
    src/ModelCore/MapGreatCrossingVI.cpp
    src/ModelCore/MapGreaterCatanIV.cpp
    src/ModelCore/MapGreaterCatanVI.cpp
    src/ModelCore/MapIntoDesertIII.cpp
    src/ModelCore/MapIntoDesertIV.cpp
    src/ModelCore/MapIntoDesertV.cpp
    src/ModelCore/MapIntoDesertVI.cpp
    src/ModelCore/MapNewShores.cpp
    src/ModelCore/MapNewWorldIII.cpp
    src/ModelCore/MapNewWorldIV.cpp
    src/ModelCore/MapNewWorldV.cpp
    src/ModelCore/MapNewWorldVI.cpp
    src/ModelCore/MapOceansIII.cpp
    src/ModelCore/MapOceansIV.cpp
    src/ModelCore/MapOceansV.cpp
    src/ModelCore/MapOceansVI.cpp
    src/ModelCore/MapSixIslands.cpp
    src/ModelCore/MapStandard.cpp
    src/ModelCore/Recurse.cpp
    src/ModelCore/TileObject.cpp
    src/ModelCore/TileObject.h
    src/ModelCore/Trade.cpp
    src/ModelCore/UtilityMap.h
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/RulesCore/Rule.h
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RuleExtensionMixin.h
    src/RulesCore/RuleSet.cpp
    src/RulesCore/RuleSet.h
    src/RulesCore/RulesCore.vcproj
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGeneratePortPlacements.cpp
    src/SeafarersRules/RuleInitializeChipless.cpp
    src/SeafarersRules/RuleInitializeHidden.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/RuleInitializeTradeRoutes.cpp
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/RuleGenerateAroundBoardPorts.cpp
    src/StandardRules/RuleGenerateCards.cpp
    src/StandardRules/RuleGenerateChips.cpp
    src/StandardRules/RuleGenerateRandom.cpp
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/RuleInitial.h
    src/StandardRules/RuleInitializeJungles.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/StandardRules.vcproj
    src/common/RuleSetDatabase.cpp
    src/common/RuleSetDatabase.h
    src/common/RuleTemplate.txt
    src/common/define/defineGame.h
    +src/RulesCore/Access.cpp
    +src/RulesCore/Access.h
    +src/RulesCore/BaseMixin.h
    +src/RulesCore/Logic.h
    +src/RulesCore/LogicBooleanMixin.h
    +src/RulesCore/LogicTemplate.txt
    +src/RulesCore/RuleExtensionMixin.cpp
    +src/StandardRules/LogicPlaceInitialSettlement.cpp
    +src/StandardRules/LogicPlaceInitialSettlement.h
    -src/RulesCore/Rule.cpp:
    And there was Logic!  Behold!
    
2004-07-30  Jason Fugate <jfugate@users.sourceforge.net>
 *  src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/app.cpp
    src/GLCore/BaseGLCanvas.cpp
    src/GLCore/BaseGLCanvas.h
    src/GLCore/FrameworkGLCanvas.cpp
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    src/RulesCore/RulesCore.vcproj
    +src/RulesCore/DrawObjectDatabase.cpp
    +src/RulesCore/DrawObjectDatabase.h
    Recreated a DrawObjectDatabase since its conceptually
    different from the RulesDatabase and belongs in its
    own object.  Had to work out a few tricky details with
    cleanup but it's working correctly now.
 *  src/Cities3D/app.cpp
    src/Tex3D/TexDialog.cpp
    src/Tex3D/TexDropListCtrl.cpp
    src/Tex3D/app.cpp
    src/*/*.vcproj
    +src/Test3D/MainFrame.cpp
    +src/Test3D/MainFrame.h
    +src/Test3D/app.cpp
    +src/Test3D/app.h
    +src/Test3D/stdwx.cpp
    +src/Test3D/stdwx.h
    +src/Test3D/test3d.ico
    +src/Test3D/test3d.rc
    +src/Test3D/test3d.vcproj
    +src/Test3D/test3d.xpm:
    No more cppunit at all in the main projects.  Now there is a
    Test3D project which will become the test bed for the entire
    system, or at least, all of the non-UI parts of it.  UI 
    automated testing is always a little tricky.  :P  Note that
    the test3d.xpm file needs to be converted from the icon.
    Right now it's still the Cities3D icon.
 *  distribute/data/mapkey.db
    distribute/data/maps.db
    src/Cities3D/AddPlayerDialog.cpp
    src/ModelCore/MapCreate.cpp
    src/ModelCore/MapDatabase.h
    src/ModelCore/MapStandard.cpp:
    Forgot to regenerate the map database after making Data changes.
    You'll need to delete players.db, too and recreate any player
    names as well.

2004-07-29  Jason Fugate <jfugate@users.sourceforge.net>
 *  src/Cities3D/BankUI.cpp
    src/DatabaseCore/LanguageDatabase.cpp
    src/DatabaseCore/LanguageDatabase.h
    src/DatabaseCore/LanguageDatabaseGenerate.cpp
    src/ModelCore/Data.cpp
    src/ModelCore/Data.h
    src/ModelCore/PlayerGame.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/common/define/defineGame.h:
    Added another data type to Data that is a hash map of a hash map
    of ints.  This allows for completely pluggable resource types, shown
    by being able to completely get rid of the enumerated type
    ResourceType from defineGame.h.  Also had to provide a special
    access function for this kind of data, notes in Data.h about it.
    Had to disable the bank GL bitmaps for now until I get this 
    plugin resource architecture done.  Next task is to switch all the
    maps to use wxString as the tile type not an enumerated type, then
    start actually fixing up the bank and player UI to use plugin
    resource types.
 *  src/Cities3D/SettlersGLCanvas.cpp
    src/DatabaseCore/ConfigDatabase.cpp
    src/DatabaseCore/ConfigDatabase.h
    src/GLCore/DrawObject.cpp
    src/GLCore/FrameworkGLCanvas.cpp
    src/GLCore/FrameworkGLCanvas.h
    src/GLCore/FrameworkGLDraw.cpp
    src/GLCore/GLExport.h
    src/GLCore/stdwx.h
    src/common/define/defineGL.h
    -src/common/define/defineConfig.h:
    Fixed up the ConfigDatabase so it has a fast look up cache
    to save having to query the OS and which uses explicit template
    specializations similar to Data.  Removed the no longer
    needed defineConfig.h file.  Eventually, all you filthy define 
    files will be gone, gone, I tell you!!
 *  src/Cities3D/BankUI.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersView.cpp
    src/GLCore/GLTextures.cpp:
    At long last, ConvertGLtoWX works, and its sweet.
  * src/ModelCore/GameObject.cpp
    src/ModelCore/GameObject.h
    src/ModelCore/IGameObject.h
    src/ModelCore/UtilityGL.h:
    Fix up some file changes that didn't get picked up in my massive
    checkin last night.

2004-07-28  Loban Rahman <loban@users.sourceforge.net>
  * src/ViewCore/BaseGLCanvas.cpp:
    Fixed a bug where if GetContext() returned false/null in OnPaint(), we'd
    get deadlocked with mMutex always true.
  * src/Makefile.am:
    Updated.

2004-07-28  Jason Fugate <jfugate@users.sourceforge.net>
  * src/*/*.vcproj
    src/Cities3D/BankUI.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersGLCanvas.h
    src/CoreRules/DrawCornerSelectionObject.cpp
    src/ModelCore/ChipObject.cpp
    src/ModelCore/ChipObject.h
    src/ModelCore/Utility.h
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/RuleInitial.cpp
    src/cities3d.sln
    +src/GLCore/BaseGLCanvas.cpp
    +src/GLCore/BaseGLCanvas.h
    +src/GLCore/DisplayList.cpp
    +src/GLCore/DisplayList.h
    +src/GLCore/DrawObject.cpp
    +src/GLCore/DrawObject.h
    +src/GLCore/FrameworkGLCanvas.cpp
    +src/GLCore/FrameworkGLCanvas.h
    +src/GLCore/FrameworkGLDraw.cpp
    +src/GLCore/GLCore.vcproj
    +src/GLCore/GLExport.h
    +src/GLCore/GLMaterial.cpp
    +src/GLCore/GLMaterial.h
    +src/GLCore/GLTextures.cpp
    +src/GLCore/GLTextures.h
    +src/GLCore/VectorGL.h
    +src/GLCore/stdwx.cpp
    +src/GLCore/stdwx.h
    +src/ModelCore/Controller.cpp
    +src/ModelCore/Controller.h
    +src/ModelCore/Event.h
    +src/RulesCore/CornerObject.cpp
    +src/RulesCore/CornerObject.h
    +src/RulesCore/CornerSelectionObject.cpp
    +src/RulesCore/CornerSelectionObject.h
    +src/RulesCore/SelectionObject.h
    +src/StandardRules/RoadObject.cpp
    +src/StandardRules/RoadObject.h
    +src/StandardRules/SettlementObject.cpp
    +src/StandardRules/SettlementObject.h
    -src/ControllerCore/Controller.cpp
    -src/ControllerCore/Controller.h
    -src/ControllerCore/ControllerCore.vcproj
    -src/ControllerCore/ControllerExport.h
    -src/ControllerCore/Event.h
    -src/ControllerCore/stdwx.cpp
    -src/ControllerCore/stdwx.h
    -src/ModelCore/CornerObject.cpp
    -src/ModelCore/CornerObject.h
    -src/ModelCore/CornerSelectionObject.cpp
    -src/ModelCore/CornerSelectionObject.h
    -src/ModelCore/RoadObject.cpp
    -src/ModelCore/RoadObject.h
    -src/ModelCore/SelectionObject.h
    -src/ModelCore/SettlementObject.cpp
    -src/ModelCore/SettlementObject.h
    -src/ModelCore/Vector.h
    -src/ViewCore/BaseGLCanvas.cpp
    -src/ViewCore/BaseGLCanvas.h
    -src/ViewCore/DisplayList.cpp
    -src/ViewCore/DisplayList.h
    -src/ViewCore/DrawObject.cpp
    -src/ViewCore/DrawObject.h
    -src/ViewCore/FrameworkGLCanvas.cpp
    -src/ViewCore/FrameworkGLCanvas.h
    -src/ViewCore/FrameworkGLDraw.cpp
    -src/ViewCore/GLMaterial.cpp
    -src/ViewCore/GLMaterial.h
    -src/ViewCore/GLTextures.cpp
    -src/ViewCore/GLTextures.h
    -src/ViewCore/ViewCore.vcproj
    -src/ViewCore/ViewExport.h
    -src/ViewCore/stdwx.cpp
    -src/ViewCore/stdwx.h:
    No more ViewCore.  Now it's GLCore.  No more ControllerCore.
    There was only one file in the project so I moved Controller
    into ModelCore.  Also removed VectorGL as it was a lot of 
    fluff for nothing.  Now there' just a simple Vector struct
    contained in IGameObject that has an x, y, and z--no dependencies,
    whether real or imagined, on OpenGL to implement the coordinates.
    I'll also be sending in a request to SF to remove ViewCore and
    ControllerCore from the CVS tree.
  * src/ModelCore/IGameObject.h
    src/Cities3D/UI.h:
    While, I'm at it, add a virtual destructor to this interface.
  * src/RulesCore/IDrawObject.h:
    Fix memory leak.
  * src/Cities3D/Data.h:
    Wow, the destructor on Data wasn't virtual.  How did I miss
    that earlier?  Still doesn't fix the memory leak, though.  :P
  * src/*/*.cpp
    src/*/stdwx.h:
    Finished up adding the debug new code to every .cpp and
    stdwx.h file.

2004-07-27  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/*.cpp
    src/Cities3D/stdwx.h
    src/RulesCore/*.cpp
    src/RulesCore/stdwx.h:
    Based on information in this article: 
    http://www.litwindow.com/Knowhow/wxHowto/wxhowto.html#debug_alloc
    I've started adding the debug new version to every project as
    a line of defense against memory leaks.  I think I've tracked down
    the current memory leaks in Win32 to the tile objects not being
    destroyed properly but I haven't found the exact problem yet.
    Other changes but I don't feel like weeding through all the files
    to find the exact ones I've changed.  Fixed a couple of problems
    with the GLtoWX conversion, though it still crashes if you move
    the slider up too far.  At least the glViewport is being reset
    properly now.
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/AddPlayerDialog.h
    src/Cities3D/BaseUI.cpp
    src/Cities3D/BaseUI.h
    src/Cities3D/MainFrame.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/UI.h
    src/Cities3D/cities3d.vcproj
    src/UICore/BaseDialog.cpp
    src/UICore/BaseDialog.h
    -src/Cities3D/UI.cpp
    Switched the event table stuff over to using overridable virtual
    functions similar to OnPaint() and Paint() in BaseUI for OnSize, 
    OnOK, and OnCancel.  Also fixed a bug in SelectMapDialog where Ok 
    didn't actually work anymore. Cleaned up UI and BaseUI as well and 
    removed UI.cpp since it is nolonger necessary, UI being just an 
    interface now, which is mmm, mmm good.
    
2004-07-27  Loban Rahman <loban@users.sourceforge.net>
  * src/UICore/BaseDialog.h
    src/UICore/BaseDialog.cpp
    src/Tex3D/TexDialog.h
    src/Tex3D/TexDialog.cpp
    src/Cities3D/UI.h
    src/Cities3D/UI.cpp
    src/Cities3D/BaseUI.h
    src/Cities3D/BaseUI.cpp
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/AddPlayerDialog.h
    src/Cities3D/AddPlayerDialog.cpp:
    A bunch of changes that fix improper use of virtual methods as event
    handlers. Made OnSize(), OnPaint(), OnOK(), and OnCancel() non-virtual.
    Used event.Skip() instead of calling the base class' method explicitly.
    And, of course, declared EVENT_TABLES where needed. I know this removes
    some of the "neatness" of the code, but it's the way it has to be to be
    fully correct. I verified this on the wxWidgets forums, where some peeps,
    like us, asked why event handlers can't be virtual, since it all seems to
    work for them. Then they were pointed to cases where it doesn't work,
    especially involving compilers that are not gcc and vsc. It's mainly to
    do with "pointers to virtual methods".
  * src/UICore/BaseListCtrl.h
    src/UICore/BaseDialog.h
    src/UICore/FreeButton.h
    src/Cities3D/PlayerListCtrl.h
    src/Cities3d/PlayerTreeCtrl.h:
    Made destructors virtual for base ui classes that will be derived from, to
    prevent memory leaks. And made desctructors non-virtual for ui classes that
    will not be derived from, for efficiency.
  * src/Cities3D/MainFrame.cpp:
    When initializing the GL window, you requested GL_DEPTH_SIZE = 24 and
    GL_BUFFER_SIZE = 24 through the attrib list. My GL drivers in windows
    support this. But my GL drivers in linux only have GL_DEPTH_SIZE = 16.
    Besides, I don't see why you have a 24-bit depth requirement. Since this is
    not that graphics-heavy a game, people with older cards (which may only
    go up to 16-bit depth) should still be able to play the game easily. Plus,
    I _think_ GL_BUFFER_SIZE is unnecessary if using GL_RGBA. So... I've
    disabled these two parameters by commenting them out, letting the graphics
    driver choose instead.
  * src/Cities3D/BaseUI.cpp:
    Passing (-1, -1) for the width and height when creating a wxWindow or
    derivative means "use default". However, you can't do this for a wxBitmap,
    it causes undefined behaivor. Used GetRect() to get some valid values.
  * src/BaseGLCanvas.cpp
    src/SettlersView.cpp:
    Used recommended event.Skip() rather than explicitly calling the parent
    classes method.
  * src/Cities3D/OptionWindow.cpp:
    Made background color temporarily dark gray, for reasons explained before.
  * src/Cities3D/OptionDisplaySize.cpp:
    Assigned an initial size to the slider, because in GTK, it is extremely
    tiny by default (pretty lame).
    
2004-07-26  Loban Rahman <loban@users.sourceforge.net>
  * Makefile.am
    src/Makefile.am
    distribute/Makefile.am
    src/DatabaseCore/stdwx.h
    src/UICore/stdwx.h
    src/Tex3D/stdwx.h
    configure.ac:
    Shared libraries are now properly built.
  * src/Cities3D/OptionDisplaySize.cpp
    src/Cities3D/OptionDisplaySize.h
    src/Cities3D/OptionWindow.cpp
    src/Cities3D/OptionWindow.h
    src/Cities3D/SettingsDialog.cpp
    src/Cities3D/SettingsDialog.h:
    Added missing end-of-line.
  * src/*/*.vcproj:
    Removed references to now non-existant Makefile.am files.
  * src/RulesCore/RuleDatabase.cpp
    src/Cities3d/MainFrame.cpp:
    Modified slightly so it works in linux as well as windows. Removed all
    references to "dlls" in error/debug messages, calling them "plugins"
    instead. Also, let's enforce that the standard debug name of a plugin is
    the original name + "D". So the + "D" bit can go inside the isLoaded() and
    LoadRuleset() methods. Hence, we no longer need #ifdef _DEBUG scattered
    everywhere, just use e.g. "StandardRules", and isLoaded() or LoadRuleset()
    will add the + "D" when needed. Added some debugging messages too, to
    help in debugging.

2004-07-25  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/BankUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/PlayerDropListCtrl.h
    src/Cities3D/PlayerTreeCtrl.h
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SelectMapDialog.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/TraitsUI.cpp
    src/Cities3D/TurnUI.h
    src/Cities3D/app.cpp
    src/Cities3D/cities3d.vcproj
    src/DatabaseCore/LanguageDatabaseGenerate.cpp
    src/RulesCore/RuleDatabase.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/BaseTreeCtrl.cpp
    src/UICore/BaseTreeCtrl.h
    src/ViewCore/BaseGLCanvas.cpp
    src/ViewCore/BaseGLCanvas.h
    src/ViewCore/FrameworkGLCanvas.cpp
    src/common/define/defineUIElements.h
    +src/Cities3D/OptionDisplaySize.cpp
    +src/Cities3D/OptionDisplaySize.h
    +src/Cities3D/OptionWindow.cpp
    +src/Cities3D/OptionWindow.h
    +src/Cities3D/SettingsDialog.cpp
    +src/Cities3D/SettingsDialog.h:
    First rudimentary General Settings dialog.  This will be
    really cool when it's all working properly.  Right now, the
    proof-of-concept that dynamically resizing the entire UI
    is in place.  I had to disable the GLtoWX conversion for now
    to get it to work but I'll fix that next.  Just run
    Settings->General and then select the Size option and move
    the slider around.  Also did a bunch of cleanup of other code.

2004-07-24  Loban Rahman <loban@users.sourceforge.net>
  * Makefile.am
    src/Makefile.am
    distribute/Makefile.am
    -src/*/Makefile.am:
    Coalesced all makefiles into two, one for source, and one for the data
    files. Google "Recursive Make is bad" for a good paper one why. :-)
    Also, now, shared libraries are build and installed.

2004-07-24  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/GameSetupDialog.h
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/app.cpp
    src/Cities3D/app.h
    src/ControllerCore/Controller.cpp
    src/ControllerCore/Controller.h:
    Added some code to switch menus when a game is actually
    started and switch back when its closed.  Now possible to
    do File->Close and close the current game window without
    shutting down the app.  Also added some cleanup code to
    Controller to allow immediate destruction of the game
    object instead of resetting it to a new one.  Now just
    need to find what's causing memory leaks when closing down.
    Probably something annoying to do with Singleton order-of-
    destruction properties.  :P

2004-07-24  Loban Rahman <loban@users.sourceforge.net>
  * src/ModelCore/Utility.h:
    Used static_cast<wxInt32> to convert double to wxInt32.
    Also, is it REALLY ever possible for int(RAND * n) = n?
  * src/*/Makefile.am:
    Updated to reflect all changes Jason has made thus far.

2004-07-23  Jason Fugate <jfugate@users.sourceforge.net>
  * distribute/data/mapkey.db
    distribute/data/maps.db
    src/Cities3D/SelectMapDialog.cpp
    src/ModelCore/Data.h
    src/ModelCore/Map.cpp
    src/ModelCore/MapDatabase.h
    src/StandardRules/RuleGenerateRandom.cpp:
    Added safety checks into Data.h's read<> and data<> functions
    so that when accessing read-only values, it first checks to ensure
    that key has been created; if not, it puts up an error.  This has
    already come in very handy as I found two problems already and
    fixed them.  Also reenabled the C&K checkbox which I had disabled
    while the CheckBox files were missing.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Cities3D/SettlersView.cpp
    src/Cities3D/TurnUI.cpp
    src/CitiesRules/CitiesRules.vcproj
    src/CoreRules/CoreRules.vcproj
    src/DatabaseCore/DatabaseCore.vcproj
    src/DatabaseCore/stdwx.h
    src/NetworkRules/NetworkRules.vcproj
    src/NetworkRules/stdwx.h
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/RulesCore/RulesCore.vcproj
    src/RulesCore/stdwx.h
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/DrawBuildObject.cpp
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/DrawTileObject.cpp
    src/StandardRules/StandardRules.vcproj
    src/ViewCore/ViewCore.vcproj
    src/cities3d.sln
    +src/ViewCore/DrawObject.cpp
    +src/ViewCore/DrawObject.h
    +src/ViewCore/GLMaterial.cpp
    +src/ViewCore/GLMaterial.h
    +src/ViewCore/GLTextures.cpp
    +src/ViewCore/GLTextures.h
    -src/RulesCore/DrawObject.cpp
    -src/RulesCore/DrawObject.h
    -src/RulesCore/GLMaterial.cpp
    -src/RulesCore/GLMaterial.h:
    Moved all GL base class type stuff into ViewCore.  Decided
    not to rename it GLCore for now, because it's really annoying
    to have to have sourceforge remove empty directories. Probably
    should do it at some point.  Also removed ReadGLTextures from
    ImageDatabase and put it in its own namespace in GLTextures;
    also refactored it a little bit to keep it DRY from ReadILTextures,
    which is now more appropriately named ReadImages in ImageDatabase.
    Fixed up all the project dependencies so they are in the right order.
    Removed OpenGL dependencies from the projects that don't need it.
    Now, the only projects that depend on OpenGL are (from
    most fundamental to most capstone): ViewCore, StandardRules,
    SeafarersRules, CitiesRules, and Cities3D.  Sweet.
    Finally, added a Show(false) to the constructor of SettlersView
    and a Show(true) to the initializeUI function to make it so that
    the main window isn't shown until everything is finished initializing.
    This makes for a classier presentation.

2004-07-23  Loban Rahman <mambazo@users.sourceforge.net>
  * src/Makefile.am
    src/DatabaseCore/Makefile.am
    src/UICore/Makefile.am
    src/Cities3D/Makefile.am
    src/Tex3D/Makefile.am
    src/Tex3D/TexDialog.h
    src/Tex3D/TexDialog.cpp:
    Updated to reflect the added and removed source files.
  * src/RulesCore/ImageDatabase.cpp
    src/ControllerCore/Controller.h:
    Fixed the "passing wxStrings to wxString::Format" bug described earlier.
  * src/ControllerCore/Controller.cpp:
    Labelled a known but ignored memory leak as FIXME. Putting the words
    "FIXME" near code that either needs fixing or is a known hack allows
    one to quickly find them later, if desired. "TODO" is also used.
  * src/Tex3D/TexDropListCtrl.cpp:
    Used proper Hungarian Notation (consistent with Jason's coding style).
  * +src/UICore/ColorCheckBox.h
    +src/UICore/ColorCheckBox.cpp
    src/UICore/Makefile.am
    src/UICore/UICore.vcproj
    src/Cities3D/SelectMapDialog.cpp:
    Customized wxCheckBox class, just like ColorStaticBox. I wanted to isolate
    all the custom drawing/coloring in one location so they could be edited
    easily when the time comes. It was used in the SelectMapDialog class.
  * src/UICore/BaseTextCtrl.cpp
    src/UICore/BaseListCtrl.cpp
    src/UICore/BaseTreeCtrl.cpp:
    Changed BackgroundColor from BLACK to DKGRAY temporarily, so I can see
    the text controls in wxGTK. I'll revert the change once we fix the
    "invisibility" by doing full custom drawing and coloring.
  * src/UICore/ColorStaticBox.cpp
    src/UICore/ColorCheckBox.cpp:
    Changed BackgroundColor from getParent()'s color to DKGRAY for the same
    reasons outlined above.
  * src/Cities3D/PlayerListCtrl.cpp:
    The strcmp() has buffer-overflow issues. Since we are using wxStrings, I
    just used the builtin wxString::Cmp() function.
  * src/Cities3D/PlayerDropListCtrl.cpp:
    Removed leftover #ifdef's from sample code.
  * src/Cities3D/MapTexCtrl.cpp:
    You forgot to specify the font here. In windows, the default happened to
    be the right one.
  * src/Cities3D/PlayerTreeCtrl.cpp:
  	Doing SelectItem(wxTreeItemId()) is incorrect, since you are passing an
  	invalid wxTreeItemId, and in wxGTK, it crashes. What you meant to do
  	(according to your comments) was simply Unselect(). Similarly, you forgot
  	to check the id returned from HitTest() with isOk() before proceeding to
  	use that id. (HitTest() returns an invalid id when you location was in the
  	list control but not in any valid items, ie. in the empty area below it).

2004-07-22  Loban Rahman <mambazo@users.sourceforge.net>
  * src/UICore/BaseDialog.cpp
    src/Tex3D/TexDialog.cpp:
    Fixed a bunch of things. First, the wxBitmapButton used for preview
    should just be a simple wxStaticBitmap. Next, the hack you used to put
    the Ok button at the bottom right (by using Move()) causes flicker, I
    used a more elegant solution: insert a growable spacer above the Ok
    button. Finally, having the dialog constantly resizing (everytime you
    click on an item to preview) is (a) very annoying [the dialog could be
    big enough for the preview, but suppose the list was long and I didn't
    want to have to scroll the list], (b) implemented in a "hackish" way,
    and so (c) doesn't work as expected in wxGTK. So, I put it in a
    wxScrolledWindow, ensured it had a good default/minimum size, and let
    the user resize it at will. The only thing still wrong with the Tex3D
    main dialog is the flicker every time you choose an item to preview.
    I reckon this problem lies in wxBaseDialog implementation. Oh, and of
    course, dragging files into it doesn't work properly, but I'm assuming
    that's a TODO for later.
  * src/Tex3D/TexDropListCtrl.cpp:
    Setting itself as a drop target was elegent in theory, a bit scary in
    practice. Your hack in the destructor doesn't work outside windows. The
    only way to fix it portably was to not be so clever and do it right :-)
    i.e. with a seperate custom DropTarget class in an anonymous namespace.

2004-07-22  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BankUI.cpp
    src/Cities3D/app.cpp
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/ViewCore/BaseGLCanvas.cpp
    src/ViewCore/BaseGLCanvas.h:
    Finally got back-buffer rendered wx bitmaps to work.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/cities3d.vcproj
    -src/Cities3D/BankGLCanvas.cpp
    -src/Cities3D/BankGLCanvas.h:
    Removed dead code.
  * src/Cities3D/BankGLCanvas.cpp
    src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/DatabaseCore/DatabaseCore.vcproj
    src/RulesCore/ImageDatabase.cpp
    src/RulesCore/ImageDatabase.h
    src/ViewCore/FrameworkGLCanvas.cpp:
    Fixed crappy checkin from last night.  Now have GL to WX
    on the fly conversion sort of working for the bank window.
    
2004-07-21  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/BankGLCanvas.cpp
    src/Cities3D/BankUI.cpp
    src/Cities3D/BuildUI.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/MainFrame.h
    src/Cities3D/TurnUI.cpp
    src/Cities3D/app.cpp
    src/DatabaseCore/DatabaseCore.vcproj
    src/RulesCore/RulesCore.vcproj
    src/StandardRules/DrawBuildObject.cpp
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/DrawTileObject.cpp
    src/UICore/BaseDialog.cpp
    src/UICore/ClearButton.cpp
    src/UICore/UICore.vcproj
    src/UICore/stdwx.h
    src/ViewCore/BaseGLCanvas.cpp
    +src/RulesCore/ImageDatabase.cpp
    +src/RulesCore/ImageDatabase.h
    -src/DatabaseCore/ImageDatabase.cpp
    -src/DatabaseCore/ImageDatabase.h
    -src/DatabaseCore/Textures.cpp
    -src/DatabaseCore/Textures.h:
    First wave of changes for converting GL to WX on the fly.

2004-07-21  Loban Rahman <mambazo@users.sourceforge.net>
  * src/RulesCore/RuleDatabase.cpp
    src/ModelCore/GameDatabase.cpp
    src/ModelCore/MapDatabase.cpp
    src/DatabaseCore/Textures.cpp
    src/Cities3D/MainFrame.cpp
    src/Cities3D/SelectMapDialog.cpp
    src/Tex3D/TexDialog.cpp:
    wxString's have cast operator to const char *. However, there is a problem
    if you rely on that behaivor when passing a wxString to a printf() or
    wxString::Format() function. Since those are variable length functions,
    they don't know the correct type of their arguments, and so, depending on
    the compiler, may incorrectly cast the wxString if passed in. Not all
    compilers complain about this (all of them should). The solution is to
    explicitly pass a const char * to the function by calling the c_str()
    method of the wxString. See my forum post for full details.
  * src/UICore/ClearButton.h
    src/UICore/ClearButton.cpp
    src/UICore/BaseDialog.h
    src/UICore/BaseDialog.cpp
    src/Tex3D/TexDropListCtrl.cpp:
    src/Cities3D/ControlsUI.cpp
    src/Cities3d/GameSetupDialog.cpp
    In wxGTK, for some reason I have yet to figure out, wxButton and its
    descendents do not generate paint events _ever_. This was a problem since
    wxClearButton derives from it and depends on paint events for custom
    drawing. I solved this by deriving it straight from wxWindow instead. This
    was actually a blessing in disguise, because wxClearButton made no use of
    wxControl/wxButton/wxBitmapButton, from which it was originally derived. In
    fact, they hindered wxClearButton by trying to do their own drawing. The
    other files needed change as they refered to wxClearButton* as wxButton*,
    which I changed to explicitly say wxClearButton*. This is the first of
    various wxGTK "GOTCHA's" that needs solving. See my forum post for full
    details and explanations.

2004-07-19  Jason Fugate <jfugate@users.sourceforge.net>
  * src/DatabaseCore/ImageDatabase.cpp
    src/DatabaseCore/ImageDatabase.h
    src/common/define/defineImage.h:
    Cleaned up some dead code.
    
2004-07-19  Loban Rahman <mambazo@users.sourceforge.net>
  * distribute/Makefile.am
    src/Cities3D/Makefile.am:
    Updated to reflect added/removed source files.
  * src/*/*.vcproj:
    Added each project's Makefile.am, for easy access.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BuildUI.cpp
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/MessageUI.cpp
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/TurnUI.cpp
    src/Cities3D/TurnUI.h
    src/Cities3D/TraitsUI.cpp
    src/Cities3D/TraitsUI.h
    Added end-of-line to files that were missing it and cleaned up
    "fun region setting in __WIN32__" code.
  * src/UICore/ClearButton.cpp
    src/Cities3D/ControlsUI.cpp:
    Corrected usage of SetCursor(). There are still a few more files that
    need similar corrections.

2004-07-18  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/stdwx.h
    src/CitiesRules/stdwx.h
    src/ControllerCore/stdwx.h
    src/CoreRules/stdwx.h
    src/DatabaseCore/stdwx.h
    src/ModelCore/stdwx.h
    src/NetworkRules/stdwx.h
    src/RulesCore/stdwx.h
    src/SeafarersRules/stdwx.h
    src/StandardRules/stdwx.h
    src/UICore/stdwx.h
    src/ViewCore/stdwx.h:
    Got rid of the annoying C4702 warnings in the MSVC build.  
    Also wrapped the #pragmas in __WIN32__ blocks for 
    portability sake.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/BankUI.h
    src/Cities3D/BaseUI.cpp
    src/Cities3D/BaseUI.h
    src/Cities3D/ControlsUI.cpp
    src/Cities3D/ControlsUI.h
    src/Cities3D/MessageUI.cpp
    src/Cities3D/MessageUI.h
    src/Cities3D/PlayerUI.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/TurnUI.cpp
    src/Cities3D/TurnUI.h
    src/Cities3D/cities3d.vcproj
    +src/Cities3D/TraitsUI.cpp
    +src/Cities3D/TraitsUI.h
    -src/Cities3D/SizeUI.cpp
    -src/Cities3D/SizeUI.h:
    Everthing SizeUI is now TraitsUI, because that's a much
    more accurate description of what it is.  I just couldn't
    use that name until I had gotten rid of the old stuff
    named TraitsUI.
  * src/Cities3D/PlayerUI.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/cities3d.vcproj
    +src/Cities3D/PlayerUI.cpp
    -distribute/tex/connector.tex
    -src/Cities3D/PlayerUI.inl
    -src/Cities3D/Traits.cpp
    -src/Cities3D/Traits.h
    -src/Cities3D/TraitsUI.h
    -src/Cities3D/TraitsUI.inl:
    First pass at revamped PlayerUI.  They show up in the right positions
    with the right dimensions but are otherwise blank.  Also removed a bunch
    of no longer needed crap files.  I love removing dead code.
  * src/Cities3D/ControlsUI.cpp
    src/Cities3D/SizeUI.cpp
    src/Cities3D/SizeUI.h
    src/Cities3D/TurnUI.cpp
    src/Cities3D/TurnUI.h
    src/DatabaseCore/ImageDatabase.cpp
    src/DatabaseCore/ImageDatabase.h
    src/RulesCore/RuleDatabase.cpp
    src/common/define/defineImage.h
    +distribute/tex/diceI.tex
    +distribute/tex/diceII.tex
    -distribute/tex/dice.tex:
    Finished up getting all of the UI components of TurnUI back
    to their proper location.  All of the logic for making it
    work is still commented out right now, but that's because I'm
    going to change it when I get to the point of needing it.  Also
    split out dice.tex into the original dice and the C&K dice and
    put them in two different files, so that C&K dice don't have to
    be loaded unless they're needed.  Also, the TurnUI owns the dice
    images now, and not the ImageDatabase.
  * src/UICore/BaseDialog.h:
    Fixed Tex3D compile problem.
  * src/Cities3D/SettlersView.cpp
    src/Cities3D/SettlersView.h
    src/Cities3D/Traits.cpp
    src/Cities3D/Traits.h
    src/Cities3D/TurnUI.h
    src/Cities3D/cities3d.vcproj
    src/RulesCore/RuleDatabase.cpp
    src/RulesCore/RuleDatabase.h
    +src/Cities3D/TurnUI.cpp
    -src/Cities3D/TurnUI.inl:
    First pass at cleaning up TurnUI.  Shows up, does nothing.
    
2004-07-18  Loban Rahman <mambazo@users.sourceforge.net>
  * src/Cities3D/Makefile.am
    distribute/Makefile.am:
    Updated to reflect added/removed files from the source tree.
  * src/*/*.vcproj:
    Fixed some inconsistencies. Put ../../distribute as the working directory
    of Tex3D and Cities3D, so I can run the debugger straight from Visual
    Studio and it will find the dll's and data files automatically.
  * src/*/*.h
    src/*/*.inl
    src/*/*.cpp:
    Gcc warns that the C/C++ standard demands a newline at the end of every
    C/C++ source file (including headers), which Visual Studio violates.
    I want to scold both the compilers, Visual Studio for not complying with
    such an easy thing, and gcc for being so pedantic about such a trivial
    thing. It was easy to fix, though, with this quick bash script:
		find . -name "*.cpp" -exec sh -c 'echo >> {}' \;
		find . -name "*.h" -exec sh -c 'echo >> {}' \;
		find . -name "*.inl" -exec sh -c 'echo >> {}' \;

2004-07-17  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/ControlsUI.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/Traits.cpp
    src/Cities3D/cities3d.vcproj
    src/DatabaseCore/LanguageDatabaseGenerate.cpp
    src/common/define/defineUIElements.h
    +src/Cities3D/ControlsUI.cpp
    -src/Cities3D/ControlsUI.inl
    -distribute/tex/controls.tex:
    Finished up the ControlsUI control panel resizing system.  The controls.tex
    file is no longer needed as the control panel buttons now use the standard
    look like everything else.
  * src/Cities3D/BankUI.cpp
    src/Cities3D/MessageUI.h
    src/Cities3D/SettlersView.cpp
    src/Cities3D/SizeUI.cpp
    src/Cities3D/SizeUI.h
    src/Cities3D/cities3d.vcproj
    src/ViewCore/FrameworkGLCanvas.h
    +src/Cities3D/MessageUI.cpp
    -src/Cities3D/MessageUI.inl:
    Fixed the DECLARE_EVENT_TABLE problems in FrameworkGLCanvas.  Also reworked
    MessageUI to the new resizing system and added a font sizer which will come
    in very handy.
  * src/Cities3D/BankUI.cpp:
    Fixed the bank not showing up on screen.
    
2004-07-17  Loban Rahman <mambazo@users.sourceforge.net>
  * @ various:
	The macro _WIN32 is guaranteed to be defined in microsoft compilers (but
	not all	windows compilers). WIN32 is only defined in the .vcproj files of
	the source tree. __WIN32__, however, is defined by the wxWidgets headers,
	which we are using throughout to help cross-platformability. It will exist
	for all compilers in all windows environments, and nowhere else. Hence, I've
	changed all occurances to __WIN32__ (95% already were anyway).
  * src/*/stdwx.h:
    The source files needed to #include "config.h" before ANY other #include.
    This file is generated by autoconf, and encapsulates the idiosyncracities
    of the particular unix environment that the code is being compiled in,
    which allows easy compilation on many, many unix machines. The #include
    is surrounded by #ifdef HAVE_CONFIG_H ... #endif, so it will still compile
    in non-autoconf environments (e.g. windows). This was easier to add than I
    had first realized, because every source file in each project #includes the
    project's stdwx.h file (for precompilation). So all I needed to do was add
    #include "config.h" to those stdwx.h files.
  * src/Cities3D/ControlsUI.h
	src/Cities3D/GameSetupDialog.h
	src/Cities3D/MainFrame.h
	src/Cities3D/PlayerDropListCtrl.h
	src/Cities3D/PlayerTreeCtrl.h
	src/Cities3D/SelectMapDialog.h
	src/Cities3D/SettlersView.h
	src/Cities3D/TurnUI.h
	src/Cities3D/UI.h
	src/Tex3D/TexDialog.h
	src/Tex3D/TexDropListCtrl.h
	src/UICore/BaseDialog.h
	src/UICore/ClearButton.h
	src/ViewCore/BaseGLCanvas.h
	src/ViewCore/FrameworkGLCanvas.h:
	The wxWidgets documentation says that "the DECLARE_EVENT_TABLE() macro may
	occur in any section of the class (public, protected or private) but that
	it is probably better to insert it at the end, because this macro
	implicitly changes the access to protected, which may be quite unexpected
	if there is anything following it". In most of your files, you placed it
	in the beginning of the private members block, which means you have
	inadvertantly made all those members protected instead! I fixed it by
	placing the macro directly above the "private:" keyword, instead of below.
	Only in a couple of files (FrameworkGLCanvas.h, BaseDialog.h) did you make
	use of these supposed private variables as protected variables, taking
	advantage of the error. So the code won't compile. I'm leaving it to you
	to fix what should be private and what protected.
  * distribute/Makefile.am
    src/ModelCore/Makefile.am
    src/Cities3D/Makefile.am
    src/Tex3D/Makefile.am
    src/Makefile.am:
    Updated to reflect addition/removal of files from the cvs tree.
  * src/RulesCore/Rule.h
    src/Cities3D/PlayerUI.inl:
    The C++ standard dictates that you must use the template keyword to
    disambiguate dependent names. Basically, if you refer to a templated member
    of a dependent name, prefex it with the template keyword.
    See my forum post for full details and explanations.
  * src/Cities3D/ControlsUI.inl
	src/Cities3D/TurnUI.inl
	src/Cities3D/stdwx.h:
	I hate macro-based programming, at some point they _will_ break. And here
	is an example. If you pass specialized template types to the macro
	EVENT_BEGIN_TABLE (as you've done), it produces non-standards-complying
	code. Basically it emits template specialization code using the old style
	(i.e. without the template<> keyword in the front).	Visual studio accepts
	this code, but gcc does not. I wrote a special version of the macro, called
	EVENT_BEGIN_TABLE_WITH_SPECIALIZED_TEMPLATES, in stdwx.h, and used that.
	
2004-07-16  Jason Fugate <jfugate@users.sourceforge.net>
  * Cities3D/BankUI.h
    src/Cities3D/BaseUI.cpp
    src/Cities3D/BaseUI.h
    src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/Cities3D/PlayerUI.inl
    src/Cities3D/SettlersView.cpp
    src/Cities3D/SettlersView.h
    src/Cities3D/Traits.cpp
    src/Cities3D/Traits.h
    src/Cities3D/UI.h
    src/Cities3D/cities3d.vcproj
    src/ControllerCore/Controller.h
    src/ControllerCore/Event.h
    src/CoreRules/Rule0.cpp
    +src/Cities3D/BankUI.cpp
    +src/Cities3D/SizeUI.cpp
    +src/Cities3D/SizeUI.h
    -src/Cities3D/BankUI.inl:
    This should take care of the problems with all of the ScreenUI template
    classes.  They are in the process of being totally redone without 
    templates.  Going with traits templates was just me messing around with
    templates to see if they would work for that, and they turned out to be
    really annoying.  Now, instead of having a traits template parameter, each
    UI is required to create a default SizeUI-derived object.  SizeUI (which will
    later be renamed to TraitsUI, which is more apt) is a little class that
    stores a hash map of all the values that particular UI needs to size itself.
    Right now, every type of ScreenUI is commented out, except for BankUI, which
    creates itself properly, which you can look at as an example.  Each
    SizeUI class creates itself with the parameters that will make the smallest
    version of that UI on the screen.  However, in the future, there will be a 
    slider bar in the display options that allows you to dynamically resize
    *every* piece of UI on the screen (no more "Large Fonts").  SizeUI has a
    built-in Resize function that will take all of the default values in its IntHash
    and multiply them by the resize amount.  Each UI is now also required to 
    implement a ResizeUI function that handles a total UI resize, recreating
    or resizing any necessary elements to grow them to the new parameters.
    
    There's more.  I've also added some more stuff to Event.h.  Now, a 
    receiver can chose to remove itself, while it is being fired off (for
    one-shot events, as an example).  When and Event is now transmitting, if
    a receiver removes itself, instead of immediately deleting the receiver, the
    Event stores that receiver in a to-remove list, which is then committed after
    the transmit has completed.  Also, events with 0 receivers are cleaned up
    immediately after transmitting is done, as well.
  * src/DatabaseCore/FileDatabase.cpp
    src/DatabaseCore/FileDatabase.h
    src/DatabaseCore/ImageDatabase.cpp
    src/DatabaseCore/ImageDatabase.h
    src/DatabaseCore/Textures.cpp
    src/DatabaseCore/Textures.h
    src/StandardRules/DrawBuildObject.cpp
    src/StandardRules/DrawChipObject.cpp
    src/StandardRules/DrawTileObject.cpp
    src/ViewCore/FrameworkGLCanvas.cpp
    src/common/define/defineFile.h
    -distribute/tex/pieces.tex:
    ReadGLTextures and ReadILTextures now take wxString parameters instead of
    the enumerated TexFileType type.  This way, DrawObjects provide their
    own tex file name instead of having some common include file that needs to be
    referenced.  Also removed the no-longer-needed pieces.tex file, since it has
    been split up into others.
  * +distribute/tex/city.tex
    +distribute/tex/knights.tex
    +distribute/tex/road.tex
    +distribute/tex/settlement.tex
    +distribute/tex/ship.tex
    +distribute/tex/walls.tex
    +src/tex3d.sln
    -src/Tex3D/tex3d.sln
    src/Tex3D/TexDialog.cpp
    src/Tex3D/TexDialog.h
    src/Tex3D/TexDropListCtrl.cpp
    src/Tex3D/TexDropListCtrl.h:
    Tweaked Tex3D so you can delete entries from .tex files (next is appending 
    entries).  Split out pieces.tex into six separate files for each
    type that was contained within it (so you don't have to load city walls
    when you're not playing C&K, etc.).  Next step will be to modify
    the DrawSettlementObjectClass since it is still referring to pieces.tex.
    Also moved the Tex3D.sln solution file out to where Cities3D's sits, so
    they make a nice pair.  :P    
  * src/GameSetupDialog.cpp:
    Forgot to undo a comment-out that I used for testing.
  * src/ControllerCore/Controller.cpp
    src/ControllerCore/Controller.h:
    Fixed a memory leak.  Deleting void * pointers is not such a good idea. :P
    Instead, use the pEvent pointer to delete the memory.  Still a problem in
    the ControllerCore destructor if there are left over listeners that clients
    have not removed before the app shuts down, because the only thing I can do 
    there is delete void * pointers; however, this probably isn't a problem with
    modern OSs running apps in their own memory spaces.
  * -src/Cities3D/cities3d.sln
    +src/cities3d.sln:
    Moved the solution file out into the /src directory so that it is
    easier to find and open it.

2004-07-16  Loban Rahman <mambazo@users.sourceforge.net>
  * src/ControllerCore/Controller.h:
    std::__non_rtti_object is microsoft specific (most things starting with
    "__" tend to be platform-specific and reserved). In fact, it's unnecessary
    here because it inherits from std::bad_typeid, which is caught in the next
    line. Both catch blocks do nothing. So I removed the redundant microsoft-
    specific catch block entirely.
  * src/Cities3D/MessageUI.inl
    src/Cities3D/TurnUI.inl
    src/Cities3D/PlayerUI.inl
    You forgot to #include "Game.h", "define/defineGame.h", "UtilityEvent.h".
    I wonder how your compiler let you access members of classes without access
    to their definitions. :-)
  *	src/Cities3D/PlayerUI.inl
	src/Cities3D/BankUI.inl:
	Qualified LowerLeft and UpperLeft with UI::, for the same reason below. I
	couln't use this->, like below, as it was inside a constructor init list,
	(gcc allows the this-> form in a constructor init list, but vs does not).
  * src/Cities3D/MessageUI.inl
	src/Cities3D/ControlsUI.inl
	src/Cities3D/TurnUI.inl
	src/Cities3D/PlayerUI.inl
	src/Cities3D/BankUI.inl:
    The C++ standard dictates that in a template definition, unqualified
    names will not find members of a dependent base. You must make the names
    dependent by prefixing them with this->.
    See my forum post for full details and explanations.
  * src/ControllerCore/Event.h
    The C++ standard dictates that you must use the typename keyword to
    disambiguate dependent names. Basically, if you typedef a template, then
    you must use the keyword "typename" before that typedeffed name to signify
    that it's a type. See my forum post for full details and explanations.

2004-07-15  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/BankGLCanvas.cpp
    src/Cities3D/BankGLCanvas.h
    src/Cities3D/BuildUI.cpp
    src/Cities3D/BuildUI.h
    src/Cities3D/ControlsUI.h
    src/Cities3D/ControlsUI.inl
    src/Cities3D/GameSetupDialog.cpp
    src/Cities3D/MapTextCtrl.cpp
    src/Cities3D/MessageUI.h
    src/Cities3D/MessageUI.inl
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerPair.cpp
    src/Cities3D/PlayerPair.h
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.h
    src/Cities3D/PlayerUI.inl
    src/Cities3D/SettlersGLCanvas.cpp
    src/Cities3D/SettlersView.cpp
    src/Cities3D/TurnUI.h
    src/Cities3D/TurnUI.inl
    src/ControllerCore/Controller.cpp
    src/ControllerCore/Controller.h
    src/ControllerCore/ControllerCore.vcproj
    src/ControllerCore/Event.h
    src/CoreRules/RuleGenerateBoard.cpp
    src/CoreRules/RuleLoadMap.cpp
    src/CoreRules/RuleUIPlayers.cpp
    src/ModelCore/ModelCore.vcproj
    src/StandardRules/RuleInitial.cpp
    + src/ModelCore/UtilityEvent.h:
    No more specific events in Controller.h.  Instead, templates are used with
    everyone's favorite reinterpret_cast<void *> to keep a hash map based on (what else)
    wxString values for events.  However, this isn't as dangerous as it seems, due
    to the handy typeinfo function, which is used to record the parameter type
    the first time an event is created.  Subsequent additional receivers that are
    added to the event have their parameter type checked against the existing one and 
    if they are different, an error log is shown to the screen with relevant information.
    Also, if an event is triggered with a parameter type different than the one stored
    for the event, it fails with error log messages as well.

2004-07-14  Loban Rahman <mambazo@users.sourceforge.net>
  * src/ModelCore/Data.h:
    Explicit specialization inside the class declaration is not standards
    compliant (and not allowed in gcc). Moved them outside, but inline, which
    is the standards compliant equivalent. See my forum post for full details.
    Also, your empty member template data() trick doesn't work in gcc, because
    gcc considers that only a warning, not an error. But by doing an explicit
    void return, you will get your desired compiler error.
  * src/Cities3D/cities3d.sln
    src/Tex3D/tex3d.sln:
    Added the ChangeLog to the solution files, for easy access.
  * src/ControllerCore/ControllerExport.h
	src/DatabaseCore/DatabaseExport.h
	src/ModelCore/ModelExport.h
	src/RulesCore/RulesExport.h
	src/UICore/UIExport.h
	src/ViewCore/ViewExport.h:
	I made this change and committed it a while ago, but forgot to document it.
    dllimport and dllexport are microsoft-specific. They have no equivalent in
    gcc (and have no need either). I've encapsulated them with #ifdef __WIN32__.
    Do note that, for now, I'm just compiling _everything_ statically in linux,
    for simplicity. I'll handle shared objects once the code settles.

2004-07-13  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/AddPlayerDialog.cpp
    src/Cities3D/PlayerDropListCtrl.cpp
    src/Cities3D/PlayerListCtrl.cpp
    src/Cities3D/PlayerTreeCtrl.cpp
    src/Cities3D/PlayerUI.inl
    src/ModelCore/Data.cpp
    src/ModelCore/Data.h
    src/ModelCore/Player.cpp
    src/ModelCore/Player.h
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/StandardRules/RuleGenerateCards.cpp
    src/StandardRules/RuleInitializeStandard.cpp:
    Removed the last vestiges of the old data methods from the game.  Now all
    access is via read<> or data<>.
    
2004-07-12  Jason Fugate <jfugate@users.sourceforge.net>
  * src/Cities3D/PlayerGame.cpp
    src/Cities3D/PlayerGame.h:
    Second pass at removing enum-based data from the PlayerGame class.
    All IntArray2 2D arrays have been changed.  Now only 1D arrays left.
  * src/Cities3D/PlayerPair.cpp
    src/Cities3D/PlayerPair.h
    src/Cities3D/PlayerUI.h
    src/Cities3D/PlayerUI.inl
    src/CitiesRules/RuleInitializeCities.cpp
    src/ModelCore/PlayerGame.cpp
    src/ModelCore/PlayerGame.h
    src/NetworkRules/RuleInitializeNetwork.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/SeafarersRules/SeafarersRules.vcproj
    src/StandardRules/RuleInitial.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/StandardRules.vcproj
    src/StandardRules/defineRules.h:
    First pass at removing enum-based data from the PlayerGame class.
    All of the standard wxInt32 enums are gone.
  * src/Cities3D/BankGLCanvas.cpp
    src/Cities3D/SettlersView.cpp
    src/CoreRules/RuleFindPorts.cpp
    src/ModelCore/Game.cpp
    src/ModelCore/Game.h
    src/ModelCore/UtilityMap.h
    src/SeafarersRules/RuleGenerateChipless.cpp
    src/SeafarersRules/RuleGenerateHidden.cpp
    src/SeafarersRules/RuleGeneratePortPlacements.cpp
    src/SeafarersRules/RuleInitializeChipless.cpp
    src/SeafarersRules/RuleInitializeHidden.cpp
    src/SeafarersRules/RuleInitializePortPlacement.cpp
    src/SeafarersRules/RuleInitializeSeafarers.cpp
    src/StandardRules/RuleGenerateCards.cpp
    src/StandardRules/RuleInitializeStandard.cpp
    src/StandardRules/StandardRules.vcproj:
    Removed the last vestiges of enum-based data access from the Game class.
    Most of the data initialization is now done in the plugin rules classes,
    except for a few bits that are required for every instance of Game.
    
2004-07-12  Loban Rahman <loban@users.sourceforge.net>
  * @various:
    Added autoconf build files for the entire project. Unix compilation is now
    possible and very easy.
  * src/ModelCore/Data.h
    src/ModelCore/Data.inl:
    For some odd reason, gcc does not allow explicit template specialization
    inside a class declaration. It has to be outside it. So I moved them into
    a new Data.inl file, which Data.h now includes.
  * */Makefile.am:
    Updated all Makefile.am's to reflect added/removed files.
  * src/ModelCore/Data.h
    src/ModelCore/Data.inl:
    I screwed up. The change above doesn't compile in windows. Reverting.

2004-07-11  Loban Rahman <loban@users.sourceforge.net>
  * wxWindows-2.4.2/
    cppunit-1.9.11/
    boost-1.30.2/:
    Moved external dependencies into seperate modules.
  * */*.vcproj:
    Modified to reflect the new cvs directory structure.
    Also corrected a few mistakes and inconsistencies on the way,
    e.g. linking to debug deps in a release build.

2004-07-07  Loban Rahman <loban@users.sourceforge.net>
  * @various:
    Many, many changes to fix cross-platform issues. They include ...

    ### Non-standard / Obsolete C++ usage
    - Forward declarations of enums are not allowed in gcc.
      Is it even standard C++? I removed the forward declarationss and
      #included the files that actually define the enums.
    - You took pointers or references to member methods in a non-standard way.
      I replaced things like methodName with ClassName::methodName or
      &ClassName::methodName. The changes were needed in calls to bind(),
      add/removeReciever(), and in creating EVENT_TABLEs.
    - long signed(variable) casting doesn't work, since the type is 2 words.
      It has to be (long signed) variable or (long signed) (variable).
      This also shows up when doing wxInt32(variable), since wxWindows
      #defines it to long signed. Stupid wxWindows. It should have used
      typedefs, or at least enclosed it in parentheses. Does the C++ standard
      require long signed(variable) casting to work, and hence this a gcc bug?
      In any case, shouldn't you be using static_cast<>() instead?
    - I had to manually cast off_t to wxInt32. I used a C-style cast as you
      have been using, but again it should be static_cast<>().
    - You used an obsolete method of template specialization. You wrote
      void foo<>(). I replaced it with the current standard method:
      template<> void foo().
    - When declaring a friend class, you must say "friend class Foo",
      not "friend Foo".

    ### Windows-specific C++ usage
    - You #included gl/glu.h. It should be GL/glu.h. In windows it doesn't
      matter as it's case insensitive. Not so in any unix. I changed gl to GL.
    - You used __cdecl to specify the calling convention of a few functions,
      function pointers to be exact. This keyword is microsoft-specific, in
      gcc the keyword is just cdecl. It is unnecessary because cdecl is the
      default calling convention (both in gcc and your visual studio slns).
      So I just removed it. There MAY be a problem because C++ by default uses
      it's own calling convention, not cdecl, but again it is the same on all
      platforms. So I think it'll all just work.
    - You #included a msw (windows) specific header, this may not be available
      on non-windows machines. I enclosed the #include with
      #ifdef __WIN32__ ... #endif. I also recommend not including it at all,
      since it's labelled as a "wxWindows private header". This means that
      there is no guarantee that it will remain the same in future versions.
    - The ::ZeroMemory() function is windows specific. I replaced calls to
      ::ZeroMemory(pointer, length) with memset(pointer, 0, length).
      memset() is a standard C function, available everywhere.
    - Using cities3d.ico and tex3d.ico for icons is windows specific.
      I added a cities3d.xpm and tex3d.xpm in the appropriate locations.
      They will be used for all unix environments.
